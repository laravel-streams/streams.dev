[{"id":"api","stage":"review","title":"API Readiness","category":"Core Concepts","enabled":true,"publish_at":"2023-02-24T00:00:00.000000Z","sort":10,"body":"\n## Introduction\n\nThe Streams platform provides an optional two-way universal RESTful API and Javascript client. The API provides access and management control to all domain information and models and a streamlined interface to define custom endpoints.\n\n- [Introduction](api\/introduction)\n- [Endpoints](api\/endpoints)\n- [Client](api\/client)\n","href":"\/docs\/api","package":"Streams"},{"id":"configuration","title":"Configuration","category":"Getting Started","stage":"review","enabled":true,"sort":2,"body":"\n## Introduction\n\nStreams uses Laravel config files and environment variables for application-level settings.\n\n### Configuration Files\n\nPublished configuration files reside in `config\/streams\/`.\n\n``` files\n\u251c\u2500\u2500 config\/streams\/\n\u2502   \u251c\u2500\u2500 core.php\n\u2502   \u251c\u2500\u2500 api.php\n\u2502   \u2514\u2500\u2500 ui.php\n```\n\n### Publishing Configuration\n\nUse the following command to publish configuration files.\n\n```bash\nphp artisan vendor:publish --tag=config\n```\n\nTo publish configuration for a specific package use the following:\n\n```bash\nphp artisan vendor:publish --provider=Streams\\\\Core\\\\StreamsServiceProvider --tag=config\n```\n\nThe above commands will copy configuration files from their package location to the directory mentioned above so that you can modify them directly and commit them to your version control system.\n\n## Environment Variables\n\nIt is often helpful to have different configuration values based on the environment in which your application is running. For example, you may wish to enable \"debug mode\" on your local server but not your production server.\n\n### The `.env` File\n\nEnvironmental variables are defined in the `.env` file in your project's root directory. In fresh installations, Composer will automatically rename the included `.env.example` file to `.env` for you.\n\nYou can manually copy and rename, or use `php -r \"copy('.env.example', '.env');\"` if the file does not already exist.\n\n### Environment Variable Types\n\nVariables in your `.env` files parse as strings. A couple specific values are worth noting:\n\n```bash\nEXAMPLE_VAR=        # (string) ''\nEXAMPLE_VAR=null    # (null) null\n```\n\nIf you need to define an environment variable value containing a space, you may enclose the value in double-quotes.\n\n``` env\nAPP_NAME=\"Spaghetti + Meatballs\"\n```\n\n### Retrieving Environment Variables\n\nAll environmental variables are available in configuration files by using the `env()` helper function. An optional second argument allows you to pass a default value.\n\n``` php\n\/\/ config\/app.php\n'debug' => env('APP_DEBUG', false),\n```\n\nOnce passed into a config file, the variable is available using the `config()` helper function. Again, an optional second argument allows you to specify a default value.\n\n``` php\n\/\/ Retrieve the above 'debug' value:\nconfig('app.debug', false)\n```\n\n### Do not version your `.env` file\n\nThe `.env` file **should not be committed to version control**. Each developer or server running your application may require a different environment configuration. It is also a security risk if a nefarious character gains access to your version control repository because sensitive data like credentials, API keys, and other configuration would be visible to them.\n\n### Hiding Environment Variables from Debug Pages\n\nWhen an exception is uncaught, and the `APP_DEBUG` environment variable is `true`, the debug page will show all environment variables and their assigned values. You may obscure variables by updating the `debug_blacklist` option in your `config\/app.php` file.\n\n``` php\nreturn [\n\n    \/\/ ...\n\n    'debug_blacklist' => [\n        '_ENV' => [\n            'APP_KEY',\n            'SECRET_API_KEY',\n            'BITCOIN_WALLET_PW',\n        ],\n\n        '_SERVER' => [\n            'APP_KEY',\n            'DB_PASSWORD',\n        ],\n\n        '_POST' => [\n            'password',\n        ],\n    ],\n];\n```\n\n\nLearn more about [environment configuration](https:\/\/laravel.com\/docs\/configuration#environment-configuration) in the Laravel docs.\n","href":"\/docs\/configuration","package":"Streams"},{"id":"contributing","title":"Contributing","category":"Getting Started","stage":"review","enabled":true,"sort":30,"references":["https:\/\/laravel.com\/docs\/7.x\/contributions","https:\/\/craftcms.com\/docs\/3.x\/coc.html"],"body":"\n## Contribution Guide\n\nThank you for considering contributing to the Streams platform! Please review the entire guide before submitting a bug report or pull request.\n\n### Bug Reports\n\nWe very much encourage pull requests, not just bug reports.\n\nA \"Bug Report\" should contain a title and a clear, detailed description of the issue. You should also include as much relevant information as possible and a code sample that demonstrates the problem. Bug reports intend to make it easy for yourself and others to replicate the bug and develop a fix.\n\nRemember, bug reports intend to promote collaboration with others experiencing the same problem to fix the bug in question. Do not expect that the bug report will automatically see any activity or that others will jump to fix it. Creating a bug report serves to help yourself and others start on the path of fixing the problem.\n\n## Which Repository?\n\nPlease send all *issues* to the [streams\/streams](https:\/\/github.com\/laravel-streams\/streams) repository to help us keep them consolidated.\n\nSend all *pull requests* to the respective repository they apply to and the branch as described below.\n\n## Which Branch?\n\nKindly send all bug fixes to the latest stable branch. Bug fixes should never be sent to development branches unless they fix issues found exclusively in the upcoming release.\n \nSend all minor features that are fully backward compatible with the current release to the latest stable branch.\n\nSend all significant new features to the development branch, which contains the upcoming Streams release.\n\nIf you are unsure if your feature qualifies as a major or minor, please ask Ryan Thompson in the [#general Discord channel](https:\/\/discord.gg\/NsEcFQM).\n\n## Security Vulnerabilities\n\nIf you discover a security vulnerability within our project, please send an e-mail to Ryan Thompson at security@streams.dev for prompt handling.\n\n## Coding Style\n\nThe Streams platform follows the PSR-4, PSR-2, and PSR-1 coding standards.\n","href":"\/docs\/contributing","package":"Streams"},{"id":"core","title":"Laravel Development","category":"Core Concepts","stage":"drafting","enabled":true,"sort":2,"body":"\n## Introduction\n\nEnhancing Laravel is a fundamental aspect of Streams Core. Laravel enhancement facilitates internal core functionality and supports developers when building their work.\n\n> [SDK Documentation](\/docs\/sdk\/introduction)\n\n### Laravel Basics\n\nStreams Core helps you take Laravel basics further and in less time.\n\n- [Views](core\/views)\n- [Routing](core\/routing)\n- [Caching](core\/caching)\n- [Utilities](core\/support)\n- [Security](core\/security)\n\n### Frontend Support\n\nStreams Core provides frontend support that encourages and supports best-practices.\n\n- [Assets](core\/assets)\n- [Images](core\/images)\n\n### Application Support\n\nSupport for building powerful and versatile Laravel products and services.\n\n<!-- - [Design Principles](core\/principles) -->\n- [Addons](core\/addons)\n- [Extensibility](core\/extending)\n- [Multi-Tenancy](core\/applications)\n","href":"\/docs\/core","package":"Streams"},{"id":"examples","sort":99,"title":"Examples","category":"Getting Started","stage":"review","enabled":true,"body":"\nDig into working projects to learn more about how Laravel Streams can be used.\n\n## Starter Project\n\nA new Laravel Streams project, ready to go.\n\n- [Starter Project](https:\/\/github.com\/laravel-streams\/streams)\n\n## Todos App\n\nA simple todos application with a decoupled backend using the [Streams API](\/docs\/api\/introduction) and the [API Client](\/docs\/api\/client).\n\n- [Todos Backend](https:\/\/github.com\/laravel-streams\/todos-backend)\n- [Todos Frontend (Vue)](https:\/\/github.com\/laravel-streams\/todos-vue-app)\n- [Todos Frontend (React)](https:\/\/github.com\/laravel-streams\/todos-react-app)\n","href":"\/docs\/examples","package":"Streams"},{"id":"installation","sort":1,"title":"Installation","category":"Getting Started","stage":"review","enabled":true,"body":"\n\n## Server Requirements\n    \nTo run Laravel Streams you will need to meet [Laravel server requirements](https:\/\/laravel.com\/docs\/deployment#server-requirements).\n\n### Supported Image Libraries\n\nPlease ensure one of the following libraries is installed in order to support [image manipulation](\/docs\/core\/images).\n\n- GD Library\n- Imagick PHP extension\n\n\n## New Projects\n\nFor new projects, the fastest way to get up and running is the [Streams starter project](\/docs\/examples):\n\n```bash\ncomposer create-project streams\/streams:1.0.x-dev\n\ncd streams\n\nphp artisan serve\n```\n\n### Included Packages\n\nThe following packages are installed with the starter project:\n\n- [streams\/core](\/docs\/core\/introduction)\n- [streams\/api](\/docs\/api\/introduction)\n- [streams\/ui](\/docs\/ui\/introduction)\n- [streams\/sdk](\/docs\/sdk\/introduction)\n\n<!-- ### Dev Packages\n\nThe following development tools are also included:\n\n- [Streams Testing](\/docs\/testing) -->\n\n### Getting Started\n\nYour streams project is now ready for you to start coding.\n\n- [Configuration](configuration)\n- [Debugging](debugging)\n\n\n### The Basics\n\nExplore the basics of Streams by example.\n\n- [Defining Streams](how-to-define-streams)\n\n#### Fundamental Concepts\n\nDig deeper into the fundamental concepts of Laravel Streams. \n\n- [Data Modeling](streams)\n- [Laravel Development](core)\n- [Frontend Development](frontend)\n- [User Interface](ui)\n- [API Readiness](api)\n\n## Existing Laravel Projects\n\nYou can add the Streams platform to existing Laravel projects by requiring the packages you need.\n\n### Streams Core\n\nThe **core** package is responsible for the meat and taters; it is the only **required** package.\n\n```bash\ncomposer require streams\/core\n```\n\n\n## Updating\nFrom within your project, use Composer to update individual packages:\n\n```bash\ncomposer update streams\/core --with-dependencies\ncomposer update streams\/api --with-dependencies\ncomposer update streams\/ui --with-dependencies\n```\n\nYou can update your entire project using **composer update**.\n","href":"\/docs\/installation","package":"Streams"},{"id":"introduction","title":"Introduction","sort":0,"stage":"review","enabled":true,"body":"\nWelcome to Laravel Streams!\n\n## What is Streams?\n\nLaravel Streams is a system of utilities providing an optimized foundation and workflow for **Laravel development**.\n\nApplication fundamentals like **data modeling**, **API interaction**, **UI**, **control panels**, and more are defined with code-configured JSON files and establish best-practices design principles to support your work.\n\nThe Streams system leans heavily on domain-driven design (DDD). We call these domain abstractions `streams`, hence our namesake.\n\n### Motivation\n\nThe ever-changing and widening landscape of web applications, websites, and the like, has stressed the traditions and ideology of popular CMS options. And, after digging into our own CMS engine, we discovered that the problem is in the CMS paradigm. This project results from the complete deconstruction of that paradigm and establishes a new one built upon new fundamental values and principles.\n\n\n### Use Cases\n\nLaravel Streams and its components are well suited to build various applications:\n\n- Websites\n- Prototyping\n- PWA Backbone\n- Headless CMS\n- Integrated CMS\n- Code Generator\n- Application Core\n- Project Bootstraps\n- Development Automation\n\n\n## How does it work?\n\nLaravel Streams focuses first on basic JSON descriptions of your data. We call them **streams**, hence our namesake.\n\n```json\n\/\/ streams\/music.json\n{\n    \"name\": \"Music\",\n    \"fields\": [\n        {\n            \"handle\": \"id\",\n            \"type\": \"slug\"\n        },\n        {\n            \"handle\": \"title\",\n            \"type\": \"string\"\n        },\n        {\n            \"handle\": \"mp3\",\n            \"type\": \"file\"\n        },\n        {\n            \"handle\": \"artist\",\n            \"type\": \"relationship\",\n            \"config\": {\n                \"related\": \"artists\"\n            }\n        }\n    ]\n}\n```\n\nBy default, Laravel Streams leverages a flat-file database engine. All databases supported by Laravel are inherently supported. An adapter interface allows you to tap into any data source you need.\n\n### Building Upon Data\n\nBy building upon data structure, we can use stream configurations to help drastically reduce the time required to do things like:\n\n- Validating the data.\n- CRUD'ing the data via a fluent and extensive API.\n- Generate schema from stream configurations.\n- Generate code from stream configurations.\n- Generate stream configurations from data.\n- Serving and consuming the data via API.\n- Building comprehensive control panels.\n- Generating quality fake data.\n\n### Development Abstraction\n\nOur overarching focus is to **abstract, normalize, and optimize** development systems and the work required from many Laravel projects. We try to restrict this to our core focus of data abstraction and access.\n\n### Principle Concerns\n\nLaravel Streams focuses on these fundamental areas of application development.\n\n- [Data Modeling](streams)\n- [Laravel Development](core)\n- [Frontend Development](frontend)\n- [User Interface](ui)\n- [API Readiness](api)\n\n### What's Next?\n\nTime to get your feet wet!\n\n@foreach (Streams::entries('docs')->where('category', 'getting_started')->orderBy('sort', 'asc')->get() as $doc)\n- [{{$doc->link_title ?: $doc->title}}]({{$doc->id}})\n@endforeach\n\n## Core Packages\n\nKnow what you are looking for already? Dive right into our core packages.\n\n- [Streams Core](core\/introduction)\n- [Streams UI](ui\/introduction)\n- [Streams API](api\/introduction)\n- [Streams CLI](cli\/introduction)\n\n\n## Community Resources\n\n- <a href=\"https:\/\/discord.gg\/vhz8NZC\" rel=\"noreferrer noopener\">Discord<\/a>\n- <a href=\"https:\/\/stackoverflow.com\/search?q=laravel+streams\" rel=\"noreferrer noopener\">Stack Exchange<\/a>\n- <a href=\"https:\/\/github.com\/laravel-streams\/streams\" rel=\"noreferrer noopener\">GitHub<\/a>\n- <a href=\"https:\/\/www.youtube.com\/channel\/UC4a-uVtWOHNCduY5T7_Q4wA\" rel=\"noreferrer noopener\">YouTube<\/a>\n","category":null,"href":"\/docs\/introduction","package":"Streams"},{"id":"streams","title":"Data Modeling","category":"Core Concepts","intro":"Data modeling is where we begin.","stage":"drafting","enabled":true,"sort":0,"body":"\n## Introduction\n\nData modeling is *the* fundamental function of Streams Core. The rest of the platform builds upon streams' data and structure.\n\n- [Streams Core](core\/introduction)\n\n### Domain Information\n\nThe Streams system leans heavily on domain-driven design (DDD). We call these domain abstractions `streams`, hence our namesake.\n\n**An example could be configuring a domain model (a stream) for a website's pages, users of an application, or feedback submissions from a form.** A stream can define anything anywhere.\n\n- [Defining Streams](\/docs\/core\/streams#defining-streams)\n\n#### Data Sources\n\nIf not configured otherwise, streams will utilize the built-in flat-file database. All databases available to Laravel are supported as well.\n\n- [Stream Sources](\/docs\/core\/sources)\n\n### Domain Entities\n\nDomain entities are called `entries` within the Streams platform. A stream also defines entry attributes or fields that dictate the entry's properties, data-casting, and more.\n\n- [Stream Entries](\/docs\/core\/entries)\n- [Entry Fields](\/docs\/core\/fields)\n- [Field Types](\/docs\/core\/fields#field-types)\n\n### Managing Entities\n\nThe Streams platform separates methods to retrieve and store entries from the objects by using a repository pattern. Entries still provide some convenient methods like `save` and `delete`.\n\n- [Repositories](\/docs\/core\/repositories)\n- [Querying Entries](\/docs\/core\/querying)\n","href":"\/docs\/streams","package":"Streams"},{"id":"ui","title":"User Interface","category":"Core Concepts","intro":"Incredibly flexible and entirely configurable UI features.","stage":"drafting","enabled":true,"sort":20,"body":"\n## Introduction\n\nStreams UI provides an extensible interface for creating any user interface your project might require.\n\n### Control Panel\n\nStreams UI provides an extensible, user-friendly, and performant control panel that gives you control of every detail.\n\n- [Control Panel](ui\/cp)\n- [Theming](ui\/theming)\n\n### UI Components\n\nStreams UI comes with a number of core components.\n\n- [Tables](ui\/tables)\n- [Forms](ui\/forms)\n- [Buttons](ui\/buttons)\n\n### Input Types\n\nInput types separate the concerns of data-modeling from data-management and provides a refreshing layer of flexibility between the two.\n\n- [Input Types](ui\/inputs)\n","href":"\/docs\/ui","package":"Streams"}]