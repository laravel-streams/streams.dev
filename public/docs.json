[{"id":"api","stage":"review","title":"API Readiness","category":"core_concepts","enabled":true,"publish_at":null,"sort":10,"body":"\n## Introduction\n\nThe Streams platform provides an optional two-way universal RESTful API and Javascript client. The API provides access and management control to all domain information and models and a streamlined interface to define custom endpoints.\n\n- [Introduction](api\/introduction)\n- [Endpoints](api\/endpoints)\n- [Client](api\/client)\n","href":"\/docs\/api","package":"Streams"},{"id":"configuration","title":"Configuration","category":"getting_started","stage":"review","enabled":true,"sort":2,"body":"\n## Introduction\n\nStreams uses Laravel config files and environment variables for application-level settings.\n\n### Configuration Files\n\nPublished configuration files reside in `config\/streams\/`.\n\n``` files\n\u251c\u2500\u2500 config\/streams\/\n\u2502   \u251c\u2500\u2500 core.php\n\u2502   \u251c\u2500\u2500 api.php\n\u2502   \u2514\u2500\u2500 ui.php\n```\n\n### Publishing Configuration\n\nUse the following command to publish configuration files.\n\n```bash\nphp artisan vendor:publish --tag=config\n```\n\nTo publish configuration for a specific package use the following:\n\n```bash\nphp artisan vendor:publish --provider=Streams\\\\Core\\\\StreamsServiceProvider --tag=config\n```\n\nThe above commands will copy configuration files from their package location to the directory mentioned above so that you can modify them directly and commit them to your version control system.\n\n## Environment Variables\n\nIt is often helpful to have different configuration values based on the environment in which your application is running. For example, you may wish to enable \"debug mode\" on your local server but not your production server.\n\n### The `.env` File\n\nEnvironmental variables are defined in the `.env` file in your project's root directory. In fresh installations, Composer will automatically rename the included `.env.example` file to `.env` for you.\n\nYou can manually copy and rename, or use `php -r \"copy('.env.example', '.env');\"` if the file does not already exist.\n\n### Environment Variable Types\n\nVariables in your `.env` files parse as strings. A couple specific values are worth noting:\n\n```bash\nEXAMPLE_VAR=        # (string) ''\nEXAMPLE_VAR=null    # (null) null\n```\n\nIf you need to define an environment variable value containing a space, you may enclose the value in double-quotes.\n\n``` env\nAPP_NAME=\"Spaghetti + Meatballs\"\n```\n\n### Retrieving Environment Variables\n\nAll environmental variables are available in configuration files by using the `env()` helper function. An optional second argument allows you to pass a default value.\n\n``` php\n\/\/ config\/app.php\n'debug' => env('APP_DEBUG', false),\n```\n\nOnce passed into a config file, the variable is available using the `config()` helper function. Again, an optional second argument allows you to specify a default value.\n\n``` php\n\/\/ Retrieve the above 'debug' value:\nconfig('app.debug', false)\n```\n\n### Do not version your `.env` file\n\nThe `.env` file **should not be committed to version control**. Each developer or server running your application may require a different environment configuration. It is also a security risk if a nefarious character gains access to your version control repository because sensitive data like credentials, API keys, and other configuration would be visible to them.\n\n### Hiding Environment Variables from Debug Pages\n\nWhen an exception is uncaught, and the `APP_DEBUG` environment variable is `true`, the debug page will show all environment variables and their assigned values. You may obscure variables by updating the `debug_blacklist` option in your `config\/app.php` file.\n\n``` php\nreturn [\n\n    \/\/ ...\n\n    'debug_blacklist' => [\n        '_ENV' => [\n            'APP_KEY',\n            'SECRET_API_KEY',\n            'BITCOIN_WALLET_PW',\n        ],\n\n        '_SERVER' => [\n            'APP_KEY',\n            'DB_PASSWORD',\n        ],\n\n        '_POST' => [\n            'password',\n        ],\n    ],\n];\n```\n\n\nLearn more about [environment configuration](https:\/\/laravel.com\/docs\/configuration#environment-configuration) in the Laravel docs.\n","href":"\/docs\/configuration","package":"Streams"},{"id":"contributing","title":"Contributing","category":"getting_started","stage":"review","enabled":true,"sort":30,"references":["https:\/\/laravel.com\/docs\/7.x\/contributions","https:\/\/craftcms.com\/docs\/3.x\/coc.html"],"body":"\n## Contribution Guide\n\nThank you for considering contributing to the Streams platform! Please review the entire guide before submitting a bug report or pull request.\n\n### Bug Reports\n\nWe very much encourage pull requests, not just bug reports.\n\nA \"Bug Report\" should contain a title and a clear, detailed description of the issue. You should also include as much relevant information as possible and a code sample that demonstrates the problem. Bug reports intend to make it easy for yourself and others to replicate the bug and develop a fix.\n\nRemember, bug reports intend to promote collaboration with others experiencing the same problem to fix the bug in question. Do not expect that the bug report will automatically see any activity or that others will jump to fix it. Creating a bug report serves to help yourself and others start on the path of fixing the problem.\n\n## Which Repository?\n\nPlease send all *issues* to the [streams\/streams](https:\/\/github.com\/laravel-streams\/streams) repository to help us keep them consolidated.\n\nSend all *pull requests* to the respective repository they apply to and the branch as described below.\n\n## Which Branch?\n\nKindly send all bug fixes to the latest stable branch. Bug fixes should never be sent to development branches unless they fix issues found exclusively in the upcoming release.\n \nSend all minor features that are fully backward compatible with the current release to the latest stable branch.\n\nSend all significant new features to the development branch, which contains the upcoming Streams release.\n\nIf you are unsure if your feature qualifies as a major or minor, please ask Ryan Thompson in the [#general Discord channel](https:\/\/discord.gg\/NsEcFQM).\n\n## Security Vulnerabilities\n\nIf you discover a security vulnerability within our project, please send an e-mail to Ryan Thompson at security@streams.dev for prompt handling.\n\n## Coding Style\n\nThe Streams platform follows the PSR-4, PSR-2, and PSR-1 coding standards.\n","href":"\/docs\/contributing","package":"Streams"},{"id":"core","title":"Laravel Development","category":"core_concepts","stage":"drafting","enabled":true,"sort":2,"body":"\n## Introduction\n\nEnhancing Laravel is a fundamental aspect of Streams Core. Laravel enhancement facilitates internal core functionality and supports developers when building their work.\n\n> [CLI Tooling Documentation](\/docs\/cli\/introduction)\n\n### Laravel Basics\n\nStreams Core helps you take Laravel basics further and in less time.\n\n- [Views](core\/views)\n- [Routing](core\/routing)\n- [Caching](core\/caching)\n- [Utilities](core\/support)\n- [Security](core\/security)\n\n### Frontend Support\n\nStreams Core provides frontend support that encourages and supports best-practices.\n\n- [Assets](core\/assets)\n- [Images](core\/images)\n\n### Application Support\n\nSupport for building powerful and versatile Laravel products and services.\n\n<!-- - [Design Principles](core\/principles) -->\n- [Addons](core\/addons)\n- [Extensibility](core\/extending)\n- [Multi-Tenancy](core\/applications)\n","href":"\/docs\/core","package":"Streams"},{"id":"examples","sort":99,"title":"Examples","category":"getting_started","stage":"review","enabled":true,"body":"\nDig into working projects to learn more about how Laravel Streams can be used.\n\n## Starter Project\n\nA new Laravel Streams project, ready to go.\n\n- [Starter Project](https:\/\/github.com\/laravel-streams\/streams)\n\n## Todos App\n\nA simple todos application with a decoupled backend using the [Streams API](\/docs\/api\/introduction) and the [API Client](\/docs\/api\/client).\n\n- [Todos Backend](https:\/\/github.com\/laravel-streams\/todos-backend)\n- [Todos Frontend (Vue)](https:\/\/github.com\/laravel-streams\/todos-vue-app)\n- [Todos Frontend (React)](https:\/\/github.com\/laravel-streams\/todos-react-app)\n","href":"\/docs\/examples","package":"Streams"},{"id":"installation","sort":1,"title":"Installation","category":"getting_started","stage":"review","enabled":true,"body":"\n\n## Server Requirements\n    \nTo run Laravel Streams you will need to meet [Laravel server requirements](https:\/\/laravel.com\/docs\/deployment#server-requirements).\n\n### Supported Image Libraries\n\nPlease ensure one of the following libraries is installed in order to support [image manipulation](\/docs\/core\/images).\n\n- GD Library\n- Imagick PHP extension\n\n\n## New Projects\n\nFor new projects, the fastest way to get up and running is a new Laravel and Streams installation:\n<!-- @todo need other examples (laragon, homestead) -->\n```bash\ncomposer create laravel\/laravel newproject\n\ncd newproject\n\ncomposer require streams\/core:2.0.x-dev\n\nphp artisan serve\n```\n\nLearn more about Streams Core in [documentation](\/docs\/core\/introduction).\n\n\n### Additional Packages\n\nYou may also want to consider using the following packages:\n\n- [streams\/api](\/docs\/api\/introduction)\n- [streams\/ui](\/docs\/ui\/introduction)\n\n<!-- ### Dev Packages\n\nThe following development tools are also included:\n\n- [Streams Testing](\/docs\/testing) -->\n\n### Getting Started\n\nYour streams project is now ready for you to start coding.\n\n- [Configuration](configuration)\n- [Debugging](debugging)\n\n\n### The Basics\n\nExplore the basics of Streams by example.\n\n- [Defining Streams](how-to-define-streams)\n\n#### Fundamental Concepts\n\nDig deeper into the fundamental concepts of Laravel Streams. \n\n- [Data Modeling](streams)\n- [Laravel Development](core)\n- [Frontend Development](frontend)\n- [User Interface](ui)\n- [API Readiness](api)\n\n## Existing Laravel Projects\n\nYou can add the Streams platform to existing Laravel projects by requiring the packages you need.\n\n### Streams Core\n\nThe **core** package is responsible for the meat and taters; it is the only **required** package.\n\n```bash\ncomposer require streams\/core\n```\n\n\n## Updating\nFrom within your project, use Composer to update individual packages:\n\n```bash\ncomposer update streams\/core --with-dependencies\ncomposer update streams\/api --with-dependencies\ncomposer update streams\/ui --with-dependencies\n```\n\nYou can update your entire project using **composer update**.\n","href":"\/docs\/installation","package":"Streams"},{"id":"introduction","title":"Introduction","sort":0,"stage":"review","enabled":true,"body":"\nWelcome to Laravel Streams!\n\n## What is Streams?\n\nLaravel Streams is a system of utilities providing an optimized foundation and workflow for **Laravel development**.\n\nApplication fundamentals like **data modeling**, **API interaction**, **UI**, **control panels**, and more are defined with code-configured JSON files and establish best-practices design principles to support your work.\n\nThe Streams system leans heavily on domain-driven design (DDD). We call these domain abstractions `streams`, hence our namesake.\n\n### Motivation\n\nThe ever-changing and widening landscape of web applications, websites, and the like, has stressed the traditions and ideology of popular CMS options. And, after digging into our own CMS engine, we discovered that the problem is in the CMS paradigm. This project results from the complete deconstruction of that paradigm and establishes a new one built upon new fundamental values and principles.\n\n\n### Use Cases\n\nLaravel Streams and its components are well suited to build various applications:\n\n- Websites\n- Prototyping\n- PWA Backbone\n- Headless CMS\n- Integrated CMS\n- Code Generator\n- Application Core\n- Project Bootstraps\n- Development Automation\n\n\n## How does it work?\n\nLaravel Streams focuses first on basic JSON descriptions of your data. We call them **streams**, hence our namesake.\n\n```json\n\/\/ streams\/music.json\n{\n    \"name\": \"Music\",\n    \"fields\": [\n        {\n            \"handle\": \"id\",\n            \"type\": \"slug\"\n        },\n        {\n            \"handle\": \"title\",\n            \"type\": \"string\"\n        },\n        {\n            \"handle\": \"mp3\",\n            \"type\": \"file\"\n        },\n        {\n            \"handle\": \"artist\",\n            \"type\": \"relationship\",\n            \"config\": {\n                \"related\": \"artists\"\n            }\n        }\n    ]\n}\n```\n\nBy default, Laravel Streams leverages a flat-file database engine. All databases supported by Laravel are inherently supported. An adapter interface allows you to tap into any data source you need.\n\n### Building Upon Data\n\nBy building upon data structure, we can use stream configurations to help drastically reduce the time required to do things like:\n\n- Validating the data.\n- CRUD'ing the data via a fluent and extensive API.\n- Generate schema from stream configurations.\n- Generate code from stream configurations.\n- Generate stream configurations from data.\n- Serving and consuming the data via API.\n- Building comprehensive control panels.\n- Generating quality fake data.\n\n### Development Abstraction\n\nOur overarching focus is to **abstract, normalize, and optimize** development systems and the work required from many Laravel projects. We try to restrict this to our core focus of data abstraction and access.\n\n### Principle Concerns\n\nLaravel Streams focuses on these fundamental areas of application development.\n\n- [Data Modeling](streams)\n- [Laravel Development](core)\n- [Frontend Development](frontend)\n- [User Interface](ui)\n- [API Readiness](api)\n\n### What's Next?\n\nTime to get your feet wet!\n\n@foreach (Streams::entries('docs')->where('category', 'getting_started')->orderBy('sort', 'asc')->get() as $doc)\n- [{{$doc->link_title ?: $doc->title}}]({{$doc->id}})\n@endforeach\n\n## Core Packages\n\nKnow what you are looking for already? Dive right into our core packages.\n\n- [Streams Core](core\/introduction)\n- [Streams UI](ui\/introduction)\n- [Streams API](api\/introduction)\n- [Streams CLI](cli\/introduction)\n\n\n## Community Resources\n\n- <a href=\"https:\/\/discord.gg\/vhz8NZC\" rel=\"noreferrer noopener\">Discord<\/a>\n- <a href=\"https:\/\/stackoverflow.com\/search?q=laravel+streams\" rel=\"noreferrer noopener\">Stack Exchange<\/a>\n- <a href=\"https:\/\/github.com\/laravel-streams\/streams\" rel=\"noreferrer noopener\">GitHub<\/a>\n- <a href=\"https:\/\/www.youtube.com\/channel\/UC4a-uVtWOHNCduY5T7_Q4wA\" rel=\"noreferrer noopener\">YouTube<\/a>\n","href":"\/docs\/introduction","package":"Streams"},{"id":"streams","title":"Data Modeling","category":"core_concepts","intro":"Data modeling is where we begin.","stage":"drafting","enabled":true,"sort":0,"body":"\n## Introduction\n\nData modeling is *the* fundamental function of Streams Core. The rest of the platform builds upon streams' data and structure.\n\n- [Streams Core](core\/introduction)\n\n### Domain Information\n\nThe Streams system leans heavily on domain-driven design (DDD). We call these domain abstractions `streams`, hence our namesake.\n\n**An example could be configuring a domain model (a stream) for a website's pages, users of an application, or feedback submissions from a form.** A stream can define anything anywhere.\n\n- [Defining Streams](\/docs\/core\/streams#defining-streams)\n\n#### Data Sources\n\nIf not configured otherwise, streams will utilize the built-in flat-file database. All databases available to Laravel are supported as well.\n\n- [Stream Sources](\/docs\/core\/sources)\n\n### Domain Entities\n\nDomain entities are called `entries` within the Streams platform. A stream also defines entry attributes or fields that dictate the entry's properties, data-casting, and more.\n\n- [Stream Entries](\/docs\/core\/entries)\n- [Entry Fields](\/docs\/core\/fields)\n- [Field Types](\/docs\/core\/fields#field-types)\n\n### Managing Entities\n\nThe Streams platform separates methods to retrieve and store entries from the objects by using a repository pattern. Entries still provide some convenient methods like `save` and `delete`.\n\n- [Repositories](\/docs\/core\/repositories)\n- [Querying Entries](\/docs\/core\/querying)\n","href":"\/docs\/streams","package":"Streams"},{"id":"ui","title":"User Interface","category":"core_concepts","intro":"Incredibly flexible and entirely configurable UI features.","stage":"drafting","enabled":true,"sort":20,"body":"\n## Introduction\n\nStreams UI provides an extensible interface for creating any user interface your project might require.\n\n### Control Panel\n\nStreams UI provides an extensible, user-friendly, and performant control panel that gives you control of every detail.\n\n- [Control Panel](ui\/cp)\n- [Theming](ui\/theming)\n\n### UI Components\n\nStreams UI comes with a number of core components.\n\n- [Tables](ui\/tables)\n- [Forms](ui\/forms)\n- [Buttons](ui\/buttons)\n\n### Input Types\n\nInput types separate the concerns of data-modeling from data-management and provides a refreshing layer of flexibility between the two.\n\n- [Input Types](ui\/inputs)\n","href":"\/docs\/ui","package":"Streams"},{"id":"addons","link_title":"Addons","title":"Addon Packages","category":"advanced","stage":"outlining","enabled":true,"sort":1,"body":"\n## Introduction\r\n\r\nAddons are [composer packages](https:\/\/getcomposer.org\/) that are specifically designed for Laravel Streams. Addons and can be distributed anywhere composer packages can be distributed (Packagist, SATIS, etc.)\r\n\r\n### Addon Development\r\n\r\nCreating addons is a great way to distribute reusable code as well as encapsulate and organize large project components. Before developing addons you should have a basic understanding of integrating with Laravel Streams as well as a general understanding of Composer packages.\r\n\r\n\r\n## Creating Addons\r\n\r\nUse `composer init` inside a new directory for your addon package. \r\n\r\n```bash\r\nmkdir example-addon\r\n\r\ncd example-addon\r\n\r\ncomposer init\r\n```\r\n\r\n### Defining Addon Packages\r\n\r\nMark your composer package as a `streams-addon` using the `type` parameter in order to declare that the package is designed for Laravel Streams. \r\n\r\n```bash\r\n\/\/ addons\/example-addon\/composer.json\r\n{\r\n    \"name\": \"myproject\/example-addon\",\r\n    \"description\": \"An example addon for my project.\",\r\n    \"type\": \"streams-addons\",\r\n    \"require\": {\r\n        \"streams\/core\": \"^2.0\"\r\n    },\r\n    \"require-dev\": {\r\n        \"streams\/testing\": \"^1.0\"\r\n    },\r\n    \"autoload\": {\r\n        \"psr-4\": {\r\n            \"MyProject\\\\ExampleAddon\\\\\": \"src\/\"\r\n        }\r\n    },\r\n    \"autoload-dev\": {\r\n        \"psr-4\": {\r\n            \"MyProject\\\\ExampleAddon\\\\Tests\\\\\": \"tests\/\"\r\n        }\r\n    },\r\n    \"license\": \"MIT\",\r\n    \"prefer-stable\": true,\r\n    \"minimum-stability\": \"dev\",\r\n    \"authors\": [\r\n        {\r\n            \"name\": \"Joe Smith\",\r\n            \"email\": \"joe@streams.dev\"\r\n        }\r\n    ],\r\n    \"extra\": {\r\n        \"laravel\": {\r\n            \"providers\": [\r\n                \"MyProject\\\\ExampleAddon\\\\ExampleAddonServiceProvider\"\r\n            ]\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n### Service Providers\r\n\r\nUsing [service providers](https:\/\/laravel.com\/docs\/providers) is the easiest way to integrate with Laravel and Streams. You can specify autodetected service providers using the `composer.json` file.\r\n\r\n``` json\r\n\/\/ addons\/example-addon\/composer.json\r\n{\r\n    \"extra\": {\r\n        \"laravel\": {\r\n            \"providers\": [\r\n                \"MyProject\\\\ExampleAddon\\\\ExampleAddonServiceProvider\"\r\n            ]\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n```php\r\n\/\/ addons\/example-addon\/src\/ExampleAddonServiceProvider.php\r\nnamespace MyProject\\ExampleAddon;\r\n\r\nuse Illuminate\\Support\\Facades\\View;\r\nuse Illuminate\\Support\\ServiceProvider;\r\n\r\nclass ExampleAddonServiceProvider extends ServiceProvider\r\n{\r\n    public function register(): void\r\n    {\r\n        \/\/\r\n    }\r\n\r\n    public function boot(): void\r\n    {\r\n        \/\/\r\n    }\r\n}\r\n```\r\n\r\n## Local Packages\r\n\r\nUsing [repository paths](https:\/\/getcomposer.org\/doc\/05-repositories.md#path) you can acheive local-only, application-specific, or development installations of addons.\r\n\r\n```json\r\n\/\/ composer.json\r\n{\r\n    \"repositories\": [{\r\n        \"type\": \"path\",\r\n        \"url\": \"addons\/example-addon\",\r\n        \"options\": {\r\n            \"symlink\": true\r\n        }\r\n    }]\r\n}\r\n```\r\n\r\n## Installing Addons\r\n\r\nGenerally speaking, installing an addon requires downloading it with composer and optionally publishing it's assets and any migrations.\r\n\r\n```json\r\n\/\/ composer.json\r\n{\r\n    \"require\": {\r\n        \/\/ ...\r\n        \"example\/addon\": \"dev-master\"\r\n    }\r\n}\r\n```\r\n","href":"\/docs\/core\/addons","package":"Streams Core"},{"id":"applications","title":"Applications","category":"advanced","sort":10,"stage":"outlining","enabled":true,"body":"\n## Introduction\n\nApplications provides a fundamental interface to configure your application based on request patterns.\n\n### Defining Applications\n\nApplications are defined using the `core.applications` stream. Entries are defined using `JSON` entry files within the `\/streams\/apps` directory by default.\n\nThe `match` value is compared to request URLs to determine the active application.\n\n```json\n\/\/ streams\/apps\/docs.json\n{\n    \"match\": \"docs.example.com\/*\"\n}\n```\n\n## Application Options\n\nThe following application options are available and support [parsing variables](parsing).\n\n### Locale\n\nSet the active locale using the **locale** property:\n\n```json\n\/\/ streams\/apps\/docs.json\n{\n    \"match\": \"docs.example.com\/*\",\n    \"locale\": \"en\"\n}\n```\n\n### Configuration\n\nOverride configuration using the **config** property:\n\n```json\n\/\/ streams\/apps\/docs.json\n{\n    \"match\": \"docs.example.com\/*\",\n    \"config\": {\n        \"app.name\": \"Documentation\"\n    }\n}\n```\n\n### Streams\n\nYou can overload streams using the **streams** property:\n\n```json\n\/\/ streams\/apps\/docs.json\n{\n    \"match\": \"docs.example.com\/*\",\n    \"streams\": {\n        \"pages\": {\n            \"source.path\": \"streams\/data\/pages\/docs\"\n        }\n    }\n}\n```\n\n### Assets\n\nUse the **assets** property to register assets by name:\n\n```json\n\/\/ streams\/apps\/docs.json\n{\n    \"match\": \"docs.example.com\/*?preview=darkmode\",\n    \"assets\": {\n        \"variable\": \"epic\/script.js\",\n        \"theme.css\": \"your\/theme\/dark.css\",\n        \"theme.js\": \"your\/theme\/dark.js\",\n        \"theme-bundle\": [\"theme.css\", \"theme.js\"]\n    }\n}\n```\n\n```blade\n@verbatim{{ Asset::load(\"random\") }}\n{{ Asset::load(\"theme-bundle\") }}@endverbatim\n```\n\n### Routes\n\nUse the **routes** property to register routes by middleware group:\n\n```json\n\/\/ streams\/apps\/docs.json\n{\n    \"match\": \"docs.example.com\/*?preview=login\",\n    \"routes\": {\n        \"web\": {\n            \"\/login\": {\n                \"uses\": \"App\\\\Http\\\\Controller\\\\Alternate@login\"\n            }\n        }\n    }\n}\n```\n\n### Policies\n\nUse the **policies** property to register policies by name:\n\n```json\n\/\/ streams\/apps\/docs.json\n{\n    \"match\": \"docs.example.com\/*?preview=login\",\n    \"policies\": {\n        \"custom-testing-array-policy\": [\"Your\\\\Policy\", \"method\"],\n        \"custom-testing-invokable-policy\": \"You\\\\InvokablePolicy\",\n        \"CustomProviderService::class\": \"Your\\\\Policy\"\n    }\n}\n```\n\n### Listeners\n\nUse the **listeners** property to register listeners by event name:\n\n```json\n\/\/ streams\/apps\/docs.json\n{\n    \"match\": \"docs.example.com\/*?preview=feature\",\n    \"events\": {\n        \"example.event\": [\n            \"App\\\\Event\\\\Listener\\\\FeatureListener\"\n        ]\n    }\n}\n```\n\n\n### Providers\n\nThe `providers` property specifies service providers to register.\n\n```json\n\/\/ streams\/apps\/docs.json\n{\n    \"match\": \"docs.example.com\/*?preview=feature\",\n    \"providers\": [\n        \"App\\\\Providers\\\\FeatureProvider\"\n    ]\n}\n```\n\n\n### Middleware\n\nThe `middleware` property specifies grouped middleware to register.\n\n```json\n\/\/ streams\/apps\/docs.json\n{\n    \"match\": \"docs.example.com\/*?preview=feature\",\n    \"middleware\": {\n        \"web\": [\n            \"App\\\\Http\\\\Middleware\\\\ExampleMiddleware\"\n        ]\n    }\n}\n```\n\n### Commands\n\nThe `commands` property specifies Artisan commands to register.\n\n```json\n\/\/ streams\/apps\/docs.json\n{\n    \"match\": \"docs.example.com\/*?preview=feature\",\n    \"commands\": [\n        \"App\\\\Console\\\\ExampleCommand\"\n    ]\n}\n```\n\n### Schedules\n\nThe `schedules` property specifies [scheduled commands](https:\/\/laravel.com\/docs\/scheduling#scheduling-shell-commands) to register.\n\n```json\n\/\/ streams\/apps\/docs.json\n{\n    \"match\": \"docs.example.com\/*?preview=feature\",\n    \"schedules\": {\n        \"* * * * *\": [\n            \"App\\\\Console\\\\ExampleCommand\",\n        ],\n        \"dailyAt|13:00\": [\n            \"App\\\\Console\\\\AnotherCommand\",\n        ]\n    }\n}\n```\n\n## Multi-Tenancy\n\nApplications provide the backbone functionality for building multi-tenancy applications.\n\n```json\n\/\/ streams\/apps\/accounts.json\n{\n    \"match\": \"*.example.com\/*\",\n    \"config\": {\n        \"app.name\": \"My Account\",\n        \"database.default\": \"{request.parsed.domain.0}\",\n        \"streams.core.data_path\": \"streams\/data\/{request.parsed.domain.0}\"\n    },\n    \"users\": {\n        \"source.table\": \"users_{request.parsed.domain.0}\"\n    }\n}\n````\n\n## Localization\n\nApplication switching provides the backbone functionality for building localized applications.\n\n```json\n\/\/ streams\/apps\/localized.json\n{\n    \"match\": \"*.example.com\/*\",\n    \"locale\": \"{request.parsed.domain.0}\",\n    \"pages\": {\n        \"source.path\": \"streams\/data\/pages\/{request.parsed.domain.0}\"\n    }\n}\n```\n\n## Resources\n\n-   [@todo Example Applications](#example-applications)\n","href":"\/docs\/core\/applications","package":"Streams Core"},{"id":"array","title":"Array Type","link_title":"Array","category":"field_types","intro":"The `array` field type stores `key:value` array data.","stage":"drafting","enabled":true,"body":"\n## Overview\n\nThe `array` field type is used for storing indexed arrays. Items can be simple or complex types. By default, any item type is valid.\n\n```json\n\/\/ streams\/example.json\n\"fields\": {\n    \"items\": {\n        \"type\": \"array\"\n    }\n}\n```\n\n### Data Structure\n\n```json\n{\n    \"items\": [\n        \"John Doe\",\n        \"Jane Smith\"\n    ]\n}\n```\n\nBasic `array` access:\n\n```blade\n@verbatim\/\/ Array access\n{{ $entry->items[0] }}\n\n@foreach ($entry->items as $index => $value)\n{{ $index }}: {{ $value }}\n@endforeach\n@endverbatim\n```\n\n### Decorator Usage\n\nThe decorated value provides collection access to the data.\n\n```blade\n@verbatim\/\/ Decorated value\n{{ $entry->items()->implode(', ') }}\n@endverbatim\n```\n\n#### Methods\n\n@todo Generate methods from @docs\n\n\n\n## Configuration\n\n@todo Generate config options from class::configuration\n\n```json\n{\n\/\/ streams\/example.json\n\"fields\": {\n    \"items\": {\n        \"type\": \"array\",\n        \"config\": {\n            \"wrapper\": \"array|collection|App\\\\MyCollection\"\n        }\n    }\n}\n}\n```\n\n### Items\n\nUse the `items` configuration to specify the allowed item types using field configurations. If specified, each item must be valid against any of the provided types.\n\n```json\n\/\/ streams\/example.json\n\"fields\": {\n    \"items\": {\n        \"type\": \"array\",\n        \"config\": {\n            \"wrapper\": \"array|collection|App\\\\MyCollection\",\n            \"items\": [\n                { \"type\": \"integer\" },\n                { \"type\": \"string\" },\n                {\n                    \"type\": \"object\",\n                    \"config\": {\n                        \"schemas\": [\n                            { \"stream\": \"addresses\" }\n                        ]\n                    }\n                },\n            ]\n        }\n    }\n}\n```\n","href":"\/docs\/core\/array","package":"Streams Core"},{"id":"assets","title":"Assets","category":"frontend","status":"drafting","enabled":true,"sort":2,"intro":null,"body":"\n## Introduction\n\nThe Streams platform comes with a fluid and highly extensible asset management tool for organizing, registering, customizing, and including your frontend assets.\n\n### Asset Collections\n\nAssets are organized into **collections** which can be accessed and output later. You can access or create an asset collection using the `Assets` facade or alias.\n\n```php\nuse Streams\\Core\\Support\\Facades\\Assets;\n\n$collection = Assets::collection('footer');\n```\n\n```blade\n@verbatim{!! Assets::collection('footer') !!} \/\/ Outputs asset tags\"@endverbatim\n```\n\n## Adding Assets\n\nUse the `add()` method to add an asset to a **collection**.\n\n```php\nAssets::collection('footer')->add('resources\/js\/start.js');\n```\n\n```blade\n@verbatim{!! Assets::collection('footer')->add('resources\/js\/start.js') !!}@endverbatim\n```\n\n### Asset Sources\n\nThe first and only argument should be the source of the asset. The following asset sources are supported out of the box.\n\n#### Paths in the Filesystem\n\nAny non-executable asset path relative to the application's **public root** may be used.\n\n```blade\n@verbatim{!! Assets::collection('footer')->add('js\/example.js') !!} \/\/ \/public\/js\/example.js@endverbatim\n```\n\n<!-- #### Configured Storage Disks\n\nYou may use any configured storage location as an asset source.\n\n```blade\n@verbatim{!! Assets::collection('footer')->add('s3::js\/example.js') !!}@endverbatim\n``` -->\n\n#### Remote URLs\n\nThe URL of a remote asset may also be used. The `allow_url_fopen` PHP directive must be enabled to output `inline` or `content` methods for remote files.\n\n```blade\n@verbatim{!! Assets::collection('footer')->add('https:\/\/cdn.com\/js\/example.js') !!}@endverbatim\n```\n\n#### Hinted Assets\n\nHinted assets are prefixed with a `namespace::` that is replaced with a [registered path](#registering-paths).\n\n```blade\n\/\/ \/public\/vendor\/anomaly\/streams\/ui\/js\/example.js@endverbatim\n@verbatim{!! Assets::collection('footer')->add('ui::js\/example.js') !!} \n\n\/\/ https:\/\/cdn.domain.com\/js\/example.js@endverbatim\n@verbatim{!! Assets::collection('footer')->add('cdn::js\/example.js') !!} \n```\n\n### Named Assets\n\nUse the `register()` method to **name** one or more **assets**. The assets parameter can be any valid source or array of sources.\n\n```php\nuse Streams\\Core\\Support\\Facades\\Assets;\n\nAssets::register('ui\/tables', [\n    'ui::js\/tables.js',\n    'ui::css\/tables.css',\n]);\n```\n\nYou can now use the collection's `load()` method to load the assets by **name**.\n\n```blade\n@verbatim{!! Assets::collection('footer')->load('ui\/tables') !!}@endverbatim\n```\n\n```php\nAssets::collection('footer')->load('ui\/tables');\n```\n\nYou can also render the output of the named single assets.\n\n```php\nAssets::tags('ui\/tables');\n```\n\n\n## Outputting Assets\n\nUse output methods to include assets from a **collection**.\n\n### Generating URLs\n\nUse the `url()` method to return a single asset URL.\n\n```blade\n@verbatim{!! Assets::url('ui::js\/example.js') !!}@endverbatim\n```\n\nYou can also use the `urls()` method on a **collection** to return all URLs.\n\n```blade\n@verbatim{!! Assets::collection('urls')->urls() !!}@endverbatim\n```\n\n### Including Assets\n\nUse the `tag()` method to return a single asset URL. An **attributes** array can be passed as a second parameter.\n\n```blade\n@verbatim{!! Assets::tag('ui::js\/example.js', [\n    'async' => true\n]) !!}@endverbatim\n```\n\nYou can also use the `tags()` method on a **collection** to return all tags.\n\n```blade\n@verbatim{!! Assets::collection('footer')->tags() !!}@endverbatim\n```\n\n## Registering Paths\n\nUse the `addPath()` method to register a **namespace** and **path**. The path parameter can be any path in the filesystem relative to the application's public root or a remote URL prefix.\n\n```php\nuse Streams\\Core\\Support\\Facades\\Assets;\n\nAssets::addPath('ui', 'vendor\/anomaly\/streams\/ui');\nAssets::addPath('cdn', 'https:\/\/cdn.domain.com');\n```\n\nYou can now use the above path hints to resolve assets.\n\n```blade\n@verbatim{!! Assets::collection('footer')->add('ui::js\/example.js') !!} \/\/ \/vendor\/anomaly\/streams\/ui\/js\/example.js@endverbatim\n@verbatim{!! Assets::collection('footer')->add('cdn::js\/example.js') !!} \/\/ https:\/\/cdn.domain.com\/js\/example.js@endverbatim\n\n@verbatim{!! Assets::url('ui::js\/example.js') !!}@endverbatim\n@verbatim{!! Assets::url('cdn::js\/example.js') !!}@endverbatim\n```\n","href":"\/docs\/core\/assets","package":"Streams Core"},{"id":"boolean","title":"Boolean Type","link_title":"Boolean","intro":"Store boolean values.","category":"field_types","stage":"drafting","enabled":true,"body":"\n## Overview\n\nThe `boolean` field type stores true\/false values.\n\n```json\n\/\/ streams\/users.json\n\"fields\": {\n    \"enabled\": {\n        \"type\": \"boolean\"\n    }\n}\n```\n\n\n## Data Structure\n\n```json\n{\n    \"enabled\": true\n}\n```\n\nBasic value access displays the stored key value:\n\n```blade\n@verbatim\/\/ Basic access\n{{ $entry->enabled }}@endverbatim\n```\n\n### Decorator Usage\n\nBoolean types also provide decorated values.\n\n```blade\n@verbatim\/\/ Decorated value\n@if ($entry->enabled()->isTrue())\n    \/\/ ...\n@endif@endverbatim\n```\n\n#### Methods\n\n@todo Generate methods from @docs\n\n## Configuration\n\n@todo Generate config options from class::configuration\n\n```json\n\/\/ streams\/users.json\n\"fields\": {\n    \"enabled\": {\n        \"type\": \"boolean\",\n        \"config\": {\n            \"default\": false\n        }\n    }\n}\n```\n","href":"\/docs\/core\/boolean","package":"Streams Core"},{"id":"caching","title":"Caching","category":"basics","intro":null,"sort":21,"stage":"drafting","enabled":true,"body":"\n## Introduction\n\nStreams Core provides a convenient API to link [Laravel cache](https:\/\/laravel.com\/docs\/cache) data to a Stream. When caching in this way, you can flush all cached items related to a Stream together.\n\n### Configuration\n\n```json\n\/\/streams\/examples.json\n{\n    \"config\": {\n        \"cache\": {\n            \"enabled\": \"true\",\n            \"store\": \"default\",\n            \"ttl\": 3600\n        }\n    }\n}\n```\n\n## Cache Usage\n\n#### The Cache Instance\n\nTo obtain a Stream-linked cache instance, you may use the `cache()` method on the desired Stream instance:\n\n```php\n$cache = Streams::make('examples')->cache();\n\n$cache->get('key');\n```\n\n### Retrieving Items\n\nUse the `get` method to retrieve items from the cache. If the item does not exist in the cache, `null` will be returned. You may pass a second argument specifying the default value to return if the item doesn't exist:\n\n```php\n$cache = Streams::make('examples')->cache();\n\n$value = $cache->get('key');\n\n$value = $cache->get('key', 'default');\n```\n\nYou may also pass a `closure` as the default value. The get method will return the closure result if the specified item does not exist in the cache. Using a closure allows you to defer the retrieval of expensive default values until they are needed:\n\n```php\n$stream = Streams::make('examples');\n\n$value = $stream->cache()->get('key', function () use ($stream) {\n    return $stream->entries()->all();\n});\n```\n\n#### Checking Items\n\nUse the `exists` method to check if an item exists in cache:\n\n```php\nif (Streams::make('examples')->cache()->has('key')) {\n    \/\/ We have it!\n}\n```\n\n#### Incrementing\/Decrementing Values\n\nUse the `increment` and `decrement` methods to increment or decrement the value of cached integer value:\n\n```php\n$cache = Streams::make('examples')->cache();\n\n$cache->increment('key');\n$cache->increment('key', $amount);\n\n$cache->decrement('key');\n$cache->decrement('key', $amount);\n```\n\n#### Retrieve & Store\n\nUse the `remember` method to retrieve an item from the cache and store a default value if the requested item doesn't exist.\n\n```php\n$value = Streams::make('examples')->cache()->remember('key', $seconds, function () {\n    return Streams::entries('examples')->get();\n});\n```\n\n#### Retrieve & Delete\n\nUse the `pull` method to retrieve an item from the cache and then delete the item.\n\n```php\n$value = Streams::make('examples')->cache()->pull('key');\n```\n\n### Storing Items\n\nUse the `put` method to store items in the cache:\n\n```php\nStreams::make('examples')->cache()->put('key', 'value', $seconds);\n```\n\nYou can also pass a `DateTime` instance instead of seconds:\n\n```php\nStreams::make('examples')->cache()->put('key', 'value', now()->addMinutes(10));\n```\n\nIf the storage time is not passed to the put method, the item will be stored indefinitely:\n\n```php\nStreams::make('examples')->cache()->put('key', 'value');\n```\n\n#### Store If Not Present\n\nUse the `add` method to store items in the cache only if they do not already exist:\n\n```php\nStreams::make('examples')->cache()->add('key', 'value', $seconds);\n```\n\n#### Store Forever\n\nUse the `forever` method to store items in the cache indefinitely:\n\n```php\nStreams::make('examples')->cache()->forever('key', 'value');\n```\n\n> Items that are stored \"forever\" may be removed under some circumstances.\n\n### Removing Items\n\nUse the `forget` method to remove items from the cache:\n\n```php\nStreams::make('examples')->cache()->forget('key');\n```\n\nYou can also remove items by providing a zero or negative number of seconds:\n\n```php\nStreams::make('examples')->cache()->put('key', 'value', 0);\n\nStreams::make('examples')->cache()->put('key', 'value', -5);\n```\n\n> Stream entry changes automatically forget\/flush cache items.\n\n#### Removing All Items\n\nYou can clear the entire cache using the `flush` method:\n\n```php\nStreams::make('examples')->cache()->flush();\n```\n\n> The flush method only flushes linked cache.\n\n## Related Documentation\n\n-   [Query Cache](querying#caching)\n-   [API Cache](..\/api\/caching)\n-   [Laravel Cache](https:\/\/laravel.com\/docs\/cache)\n-   [@todo Response Cache](#caching-responses)\n","href":"\/docs\/core\/caching","package":"Streams Core"},{"id":"configuration","title":"Configuration","category":"getting_started","intro":"Configuring the core.","sort":2,"enabled":true,"body":"\n## Configuration Files\n\nPublished configuration files reside in `config\/streams\/`.\n\n``` files\n\u251c\u2500\u2500 config\/streams\/\n\u2502   \u2514\u2500\u2500 core.php\n```\n\n### Publishing Configuration\n\nUse the following command to publish configuration files.\n\n```bash\nphp artisan vendor:publish --provider=Streams\\\\Core\\\\StreamsServiceProvider --tag=config\n```\n\nThe above command will copy configuration files from their package location to the directory mentioned above so that you can modify them directly and commit them to your version control system.\n\n## Configuring Streams Core\n\nBelow are the contents of the published configuration file:\n\n```php\n\/\/ config\/streams\/core.php\nreturn [\n\n    \/**\n     * Specify the default directory for VCS compatible (file based) data.\n     *\/\n    'data_path' => env('STREAMS_DATA_PATH', 'streams\/data'),\n\n    \/**\n     * Specify the default source adapter for streams.\n     *\/\n    'default_source' => env('STREAMS_SOURCE', 'filebase'),\n\n    \/**\n     * Configurable options for source adapters.\n     *\/\n    'sources' => [\n\n        'filebase' => [\n\n            'default_format' => env('STREAMS_DEFAULT_FORMAT', 'json'),\n\n            'formats' => [\n                'php' => \\Streams\\Core\\Criteria\\Format\\Php::class,\n                'json' => \\Streams\\Core\\Criteria\\Format\\Json::class,\n                'yaml' => \\Streams\\Core\\Criteria\\Format\\Yaml::class,\n                'md' => \\Streams\\Core\\Criteria\\Format\\Markdown::class,\n                'tpl' => \\Streams\\Core\\Criteria\\Format\\Template::class,\n            ],\n        ],\n    ],\n\n    \/**\n     * Configure the default field types.\n     *\/\n    'field_types' => [\n\n        \/\/ Numbers\n        'number' => \\Streams\\Core\\Field\\Type\\Number::class,\n        'integer' => \\Streams\\Core\\Field\\Type\\Integer::class,\n        'decimal' => \\Streams\\Core\\Field\\Type\\Decimal::class,\n\n        \/\/ Strings\n        'string' => \\Streams\\Core\\Field\\Type\\Str::class,\n\n        'url' => \\Streams\\Core\\Field\\Type\\Url::class,\n        'uuid' => \\Streams\\Core\\Field\\Type\\Uuid::class,\n        'hash' => \\Streams\\Core\\Field\\Type\\Hash::class,\n        'slug' => \\Streams\\Core\\Field\\Type\\Slug::class,\n        'email' => \\Streams\\Core\\Field\\Type\\Email::class,\n        'encrypted' => \\Streams\\Core\\Field\\Type\\Encrypted::class,\n\n        \/\/ Markup\n        'markdown' => \\Streams\\Core\\Field\\Type\\Markdown::class,\n        'template' => \\Streams\\Core\\Field\\Type\\Template::class,\n\n        \/\/ Boolean\n        'boolean' => \\Streams\\Core\\Field\\Type\\Boolean::class,\n\n        \/\/ Dates\n        'datetime' => \\Streams\\Core\\Field\\Type\\Datetime::class,\n        'date' => \\Streams\\Core\\Field\\Type\\Date::class,\n        'time' => \\Streams\\Core\\Field\\Type\\Time::class,\n\n        \/\/ Arrays\n        'array' => \\Streams\\Core\\Field\\Type\\Arr::class,\n\n        \/\/ Selections\n        'select' => \\Streams\\Core\\Field\\Type\\Select::class,\n        'multiselect' => \\Streams\\Core\\Field\\Type\\Multiselect::class,\n\n        \/\/ Objects\n        'prototype' => \\Streams\\Core\\Field\\Type\\Prototype::class,\n        'object' => \\Streams\\Core\\Field\\Type\\Structure::class,\n        'image' => \\Streams\\Core\\Field\\Type\\Image::class,\n        'file' => \\Streams\\Core\\Field\\Type\\File::class,\n\n        \/\/ Streams\n        'entry' => \\Streams\\Core\\Field\\Type\\Entry::class,\n        'entries' => \\Streams\\Core\\Field\\Type\\Entries::class,\n\n        \/\/ Relationships\n        'multiple' => \\Streams\\Core\\Field\\Type\\Multiple::class,\n        'polymorphic' => \\Streams\\Core\\Field\\Type\\Polymorphic::class,\n        'relationship' => \\Streams\\Core\\Field\\Type\\Relationship::class,\n\n        \/\/ Miscellaneous\n        'color' => \\Streams\\Core\\Field\\Type\\Color::class,\n    ],\n\n    \/**\n     * Enabling this feature automatically\n     * generages alt tags when not specified.\n     *\/\n    'auto_alt' => env('STREAMS_AUTO_ALT', true),\n\n    \/**\n     * Enabling this feature automatically\n     * generates version control query\n     * parameters when generating\n     * image URLs and output.\n     *\/\n    'version_images' => env('STREAMS_VERSION_IMAGES', true),\n\n    'markdown' => [\n        'configs' => [\n            'commonmark' => [\n                'use_asterisk' => true,\n                'use_underscore' => true,\n                'enable_strong' => true,\n                'enable_em' => true,\n                'unordered_list_markers' => [ '*', '+', '-' ],\n            ],\n            'disallowed_raw_html' => [\n                'disallowed_tags' => [\n                    'title',\n                    'textarea',\n                    'style',\n                    'xmp',\n                    'iframe',\n                    'noembed',\n                    'noframes',\n                    'script',\n                    'plaintext',\n                ],\n            ],\n        ],\n        'extensions' => [\n            \\League\\CommonMark\\Extension\\CommonMark\\CommonMarkCoreExtension::class,\n            \\League\\CommonMark\\Extension\\Autolink\\AutolinkExtension::class,\n            \\League\\CommonMark\\Extension\\DisallowedRawHtml\\DisallowedRawHtmlExtension::class,\n            \\League\\CommonMark\\Extension\\Strikethrough\\StrikethroughExtension::class,\n            \\League\\CommonMark\\Extension\\Table\\TableExtension::class,\n            \\League\\CommonMark\\Extension\\TaskList\\TaskListExtension::class,\n        ],\n    ],\n];\n```\n","href":"\/docs\/core\/configuration","package":"Streams Core"},{"id":"date","title":"Date Type","link_title":"Date","intro":"Store date values.","category":"field_types","stage":"drafting","enabled":true,"body":"\n## Overview\n\nThe `date` field type stores only date.\n\n```json\n\/\/ streams\/example.json\n\"fields\": {\n    \"starts_at\": {\n        \"type\": \"date\"\n    }\n}\n```\n\n### Configuration\n\n@todo Generate config options from class::configuration\n\n```json\n\/\/ streams\/example.json\n\"fields\": {\n    \"starts_at\": {\n        \"type\": \"date\",\n        \"config\": {\n            \"default\": \"today\"\n        }\n    }\n}\n```\n\n## Data Structure\n\n```json\n{\n    \"starts_at\": \"2021-01-01\"\n}\n```\n\nBasic value access returns the stored value:\n\n```blade\n@verbatim\/\/ Basic access\n{{ $entry->starts_at }}@endverbatim\n```\n\n### Decorator Usage\n\nDate types also provide decorated values which returns a [Carbon](https:\/\/carbon.nesbot.com\/) instance.\n\n```blade\n@verbatim\/\/ Decorated value\n{{ $entry->startsAt()->isWeekend() }}@endverbatim\n```\n\n#### Methods\n\n@todo Generate methods from @docs\n","href":"\/docs\/core\/date","package":"Streams Core"},{"id":"datetime","title":"Datetime Type","link_title":"Datetime","intro":"Store datetime values.","category":"field_types","stage":"drafting","enabled":true,"body":"\n## Overview\n\nThe `datetime` field type stores both date and time.\n\n```json\n\/\/ streams\/example.json\n\"fields\": {\n    \"starts_at\": {\n        \"type\": \"datetime\"\n    }\n}\n```\n\n### Configuration\n\n@todo Generate config options from class::configuration\n\n```json\n\/\/ streams\/example.json\n\"fields\": {\n    \"starts_at\": {\n        \"type\": \"datetime\",\n        \"config\": {\n            \"default\": \"now\"\n        }\n    }\n}\n```\n\n## Data Structure\n\n```json\n{\n    \"starts_at\": \"2021-01-01 09:30:00\"\n}\n```\n\nBasic value access returns the stored value:\n\n```blade\n@verbatim\/\/ Basic access\n{{ $entry->starts_at }}@endverbatim\n```\n\n### Decorator Usage\n\nDatetime types also provide decorated values which returns a [Carbon](https:\/\/carbon.nesbot.com\/) instance.\n\n```blade\n@verbatim\/\/ Decorated value\n{{ $entry->startsAt()->diffForHumans() }}@endverbatim\n```\n\n#### Methods\n\n@todo Generate methods from @docs\n","href":"\/docs\/core\/datetime","package":"Streams Core"},{"id":"decimal","title":"Decimal Type","link_title":"Decimal","intro":"Store fixed-precision decimal values.","category":"field_types","stage":"drafting","enabled":true,"body":"\n## Overview\n\nThe `decimal` field type stores fixed-precision decimal values. If you need to support floating point numbers, check out the [number](number) field type.\n\n```json\n\/\/ streams\/example.json\n\"fields\": {\n    \"price\": {\n        \"type\": \"decimal\",\n        \"config\": {\n            \"decimals\": 2\n        }\n    }\n}\n```\n\n### Configuration\n\n@todo Generate config options from class::configuration\n\n\n## Data Structure\n\n```json\n{\n    \"price\": 89.95\n}\n```\n\nBasic value access displays the stored value:\n\n```blade\n@verbatim\/\/ Basic access\n{{ $entry->price }}@endverbatim\n```\n\n### Decorator Usage\n\nBoolean types also provide decorated values.\n\n```blade\n@verbatim\/\/ Decorated value\n@if ($entry->price()->isOdd())\n    \/\/ ...\n@endif@endverbatim\n```\n\n#### Methods\n\n@todo Generate methods from @docs\n","href":"\/docs\/core\/decimal","package":"Streams Core"},{"id":"encrypted","title":"Encrypted Text","link_title":"Encrypted","intro":"Store non-readable text that can be decrypted.","category":"field_types","stage":"drafting","enabled":true,"body":"\n## Overview\n\nThe `encrypted` field type stores a two-way encrypted string.\n\n```json\n\/\/ streams\/example.json\n\"fields\": {\n    \"secret\": {\n        \"type\": \"encrypted\"\n    }\n}\n```\n\n## Data Structure\n\n```json\n{\n    \"secret\": \"eyJpdiI6IkRKSWdqMDVDUXYzR3pJRTkwZjJZRmc9PSIsInZhbHVlIjoic3NrUHF4RE1jVnFBVFIrNG85Rjh4VlZkU1kzQUs5VEp5b3Y5VVU2cUZYYz0iLCJtYWMiOiIyNWFhZTM1MDBhZTdmNDZiY2E2NzM2NjE1NjYzYThmMmMzYTczNGJhM2VlNjBiZDdkZmNlOGFhMWVkZmQwN2RjIiwidGFnIjoiIn0=\"\n}\n```\n\nBasic value access displays encrypted value:\n\n```blade\n@verbatim\/\/ Basic access\n{{ $entry->secret }}\n@endverbatim\n```\n\n### Decorator Usage\n\nTo get anything out of your stored value you will need to expand it.\n\n```blade\n@verbatim\/\/ Decorated value\n{{ $entry->secret()->decrypt() }}\n@endverbatim\n```\n\n#### Methods\n\n@todo Generate methods from @docs\n\n\n\n## Configuration\n\n@todo Generate config options from class::configuration\n","href":"\/docs\/core\/encrypted","package":"Streams Core"},{"id":"extending","title":"Extending","category":"advanced","intro":"Extend and customize Streams Core.","stage":"outlining","enabled":true,"sort":2,"body":"\n## Introduction\n\nStreams architecture is designed to support systemic customization and extension.\n\nBefore continuing, please familiarize yourself with [Laravel's service container](https:\/\/laravel.com\/docs\/container).\n\n\n## The Basics\n\nBelow is essential knowledge on how to extend streams core.\n\n### Macros\n\nAll basic services and components are \"macroable\" and allow direct extension via Laravel **macros**. Typically, you should declare collection macros in the **boot** method of a service provider.\n\n```php\nuse Streams\\Core\\Stream\\Stream;\nuse Streams\\Ui\\Table\\TableBuilder;\n\nStream::macro('table', function ($attributes = []) {\n\n    \/\/ Grab the UI config off the stream.\n    $configuration = Arr::get($this->ui, 'table', []);\n\n    $configuration = Arr::undot($configuration);\n\n    \/\/ Merge configured and passed attributes.\n    $attributes = array_merge($configuration, $attributes);\n\n    \/\/ Set the stream.\n    $attributes['stream'] = $this;\n\n    return new TableBuilder($attributes);\n});\n\n$table = Streams::make('contacts')->table();\n```\n\n\n### Callbacks\n\n\n\n### Workflows\n### View Overrides\n\n\n### Parsing\n## Addon Development\n","href":"\/docs\/core\/extending","package":"Streams Core"},{"id":"fields","title":"Fields","category":"core_concepts","intro":null,"enabled":true,"sort":10,"body":"\n## Introduction\n\nFields represent the type and characteristics of your stream data. For example a \"name\" field would likely be a **string** field type.\n\nFields are strictly concerned with data. Please see the [UI package](..\/ui\/introduction) for configuring field [inputs](..\/ui\/inputs).\n\n## Defining Fields\n\nFields can be defined within the JSON [configuration for your streams](streams#defining-streams). You can get started by simply defining fields by `handle` and their `type` respectively.\n\n#### Basic Example\n\n```json\n\/\/ streams\/contacts.json\n{\n    \"fields\": [\n        {\n            \"handle\": \"title\",\n            \"type\": \"string\"\n        }\n    ]\n}\n```\n\n#### Full Example\n\nTo define more information about the field use an array:\n\n```json\n\/\/ streams\/contacts.json\n{\n    \"fields\": [\n        {\n            \"handle\": \"title\",\n            \"name\": \"Title\",\n            \"description\": \"The title of the film.\",\n            \"type\": \"string\",\n            \"rules\": [\"min:4\"],\n            \"config\": {\n                \"default\": \"Untitled\"\n            },\n            \"example\": \"Star Wars: The Force Awakens\"\n        }\n    ]\n}\n```\n\n### Field Validation\n\nDefine [Laravel validation rules](https:\/\/laravel.com\/docs\/validation#available-validation-rules) for fields and they will be merged the [stream validation rules](streams#stream-validation).\n\n```json\n\/\/ streams\/contacts.json\n{\n    \"fields\": [\n        {\n            \"handle\": \"name\",\n            \"type\": \"string\",\n            \"rules\": [\"required\", \"max:100\"]\n        },\n        {\n            \"handle\": \"email\",\n            \"type\": \"email\",\n            \"rules\": [\"required\", \"email:rfc,dns\"]\n        },\n        {\n            \"handle\": \"company\",\n            \"type\": \"string\",\n            \"rules\": [\"required\", \"unique\"]\n        }\n    ]\n}\n```\n\n\n## Basic Usage\n\nValues are stored as an [image source](images#image-sources)\n\n```php\nImage::make($entry->profile_image)->url();\n```\n\n### Field Decorators\n\nField decorators provide expanded function to entry attributes like a universal presenter.\n\nThe below example demonstrates the `image` field decorator:\n\n```php\n$entry->decorate('profile_image')->url();\n```\n\nYou may also use magic methods derived from \"camel casing\" the field's handle to invoke decoration.\n\n```php\n$entry->profileImage()->url();\n```\n\n\n\n## Field Types\n\nThe field type is responsible for validating, casting, and more for its specific data type.\n\n@foreach (Streams::entries('docs_core')->where('category', 'field_types')->orderBy('sort', 'ASC')->orderBy('name', 'ASC')->get() as $entry)\n - <a href=\"{{ $entry->id }}\">{{ $entry->title }} ({{ $entry->decorate('stage') }})<\/a>\n@endforeach\n\n\n### Relationship\n\n```json\n{\n    \"type\": \"relationship\",\n    \"config\": {\n        \"related\": \"stream\"\n    }\n}\n```\n\n\n### Multiple\n\n```json\n{\n    \"type\": \"multiple\",\n    \"config\": {\n        \"related\": \"stream\"\n    }\n}\n```\n\n### File\n\n```json\n{\n    \"type\": \"file\",\n    \"config\": {\n        \"path\": \"storage::uploads\"\n    }\n}\n```\n\n### Image\n\n```json\n{\n    \"type\": \"image\",\n    \"config\": {\n        \"path\": \"storage::uploads.img\"\n    }\n}\n```\n","href":"\/docs\/core\/fields","package":"Streams Core"},{"id":"hash","title":"Hash Text","link_title":"Hash","intro":"Store non-readable, one-way hashed text.","category":"field_types","enabled":true,"stage":"drafting","body":"\n## Overview\n\nThe `hashed` field type stores a one-way hashed string.\n\n```json\n\/\/ streams\/example.json\n\"fields\": {\n    \"secret\": {\n        \"type\": \"hashed\"\n    }\n}\n```\n\n## Data Structure\n\n```json\n{\n    \"secret\": \"$2y$10$bd4ATnlv.fApn0OGSMwU7.rBOUMP2cBaFQY20NFTNdpGCYUIZMEMm\"\n}\n```\n\nBasic value access displays encrypted value:\n\n```blade\n@verbatim\/\/ Basic access\n{{ $entry->secret }}\n@endverbatim\n```\n\n### Decorator Usage\n\nTo get anything out of your stored value you will need to expand it.\n\n```blade\n@verbatim\/\/ Decorated value\n@if ($entry->secret()->check('check me'))\n    \/\/ Matches\n@endif\n@endverbatim\n```\n\n#### Methods\n\n@todo Generate methods from @docs\n\n\n\n## Configuration\n\n@todo Generate config options from class::configuration\n","href":"\/docs\/core\/hash","package":"Streams Core"},{"id":"images","title":"Images","category":"frontend","intro":null,"enabled":true,"sort":10,"body":"\n## Introduction\n\nThe Streams platform comes with a fluid and highly extensible image handling and manipulation tool that leans heavily on the fantastic [Intervention Image](https:\/\/github.com\/Intervention\/image).\n\n## Reading Images\n\nTo get started, use the `Images` facade to create a new image for working with.\n\n```php\nuse Streams\\Core\\Support\\Facades\\Images;\n\n$image = Images::make('img\/foo.jpg');\n```\n\nThe facade is aliased for use in [views](views) as well:\n\n```blade\n@verbatim{!! Images::make('resources\/img\/foo.jpg') !!}@endverbatim\n```\n\n### Image Sources\n\nThe first and only argument should be the source image to display. The following sources are supported out of the box:\n\n#### Paths in the Filesystem\n\nAny image path relative to the application root may be used.\n\n```blade\n@verbatim{!! Images::make('resources\/img\/foo.jpg') !!}@endverbatim\n```\n\n#### Configured Storage Disks\n\nYou may use any configured storage location as an image source.\n\n```blade\n@verbatim{!! Images::make('public:\/\/img\/foo.jpg') !!}@endverbatim\n```\n\nIf the file is not found relative to the base path of your application, the default public disk will be attempted.\n\n```blade\n@verbatim{!! Images::make('img\/foo.jpg') !!}@endverbatim\n```\n\n#### Remote URLs\n\nThe URL of a remote image may also be used. The `allow_url_fopen` PHP directive must be enabled to use remote image sources.\n\n```blade\n@verbatim{!! Images::make('https:\/\/example.com\/img\/foo.jpg') !!}@endverbatim\n```\n\nRemote images are cached locally. To use remote images without caching locally just use regular `<img>` tags.\n\n### Named Images\n\nUse named images to register image variables:\n\n#### Registering Images\n\nYou may regiter iamges by name using the **register** method:\n\n```php\nuse Streams\\Core\\Support\\Facades\\Images;\n\nImages::register('logo.jpg', 'images\/logo.jpg');\n```\n\n```blade\n@verbatim{!! Images::make('logo.jpg')->fit(300, 500)->quality(60) !!}@endverbatim\n```\n\n## Editing Images\n\nAfter you initiat a new image instance with `Images::make()`, you can use the below manipulation methods.\n\nChain methods together for more comple manipulations.\n\n```php\nuse Streams\\Core\\Support\\Facades\\Images;\n\n$image = Images::make('img\/foo.jpg')\n    ->fit(300, 500)\n    ->quality(60)\n    ->orientate();\n```\n\n```blade\n@verbatim{!! Images::make('resources\/img\/foo.jpg')\n    ->fit(300, 500)\n    ->quality(60)\n    ->orientate() !!}@endverbatim\n```\n\n### Resizing Images\n\nUse the following methods to resize images.\n\n- [resize()](http:\/\/image.intervention.io\/api\/resize)\n- [widen()](http:\/\/image.intervention.io\/api\/widen)\n- [heighten()](http:\/\/image.intervention.io\/api\/heighten)\n- [fit()](http:\/\/image.intervention.io\/api\/fit)\n- [crop()](http:\/\/image.intervention.io\/api\/crop)\n- [trim()](http:\/\/image.intervention.io\/api\/trim)\n\n### Adjusting Images\n\nUse the following methods to adjust various aspects of images.\n\n- [encode()](http:\/\/image.intervention.io\/api\/encode)\n- [gamma()](http:\/\/image.intervention.io\/api\/gamma)\n- [brightness()](http:\/\/image.intervention.io\/api\/brightness)\n- [contrast()](http:\/\/image.intervention.io\/api\/contrast)\n- [colorize()](http:\/\/image.intervention.io\/api\/colorize)\n- [greyscale()](http:\/\/image.intervention.io\/api\/greyscale)\n- [invert()](http:\/\/image.intervention.io\/api\/invert)\n- [mask()](http:\/\/image.intervention.io\/api\/mask)\n- [flip()](http:\/\/image.intervention.io\/api\/flip)\n\n#### quality()\n\nAdditionally, you may use the `quality` method to adjust the quality alone of JPG images.\n\n```php\nImages::make('img\/foo.jpg')->quality(60);\n```\n\n### Applying Effects\n\nUse the following methods to apply effects to images.\n\n- [filter()](http:\/\/image.intervention.io\/api\/filter)\n- [pixelate()](http:\/\/image.intervention.io\/api\/pixelate)\n- [rotate()](http:\/\/image.intervention.io\/api\/rotate)\n- [blur()](http:\/\/image.intervention.io\/api\/blur)\n\n### Drawing\n\nUse the following methods to draw on images.\n\n- [text()](http:\/\/image.intervention.io\/api\/text)\n- [pixel()](http:\/\/image.intervention.io\/api\/pixel)\n- [line()](http:\/\/image.intervention.io\/api\/line)\n- [rectangle()](http:\/\/image.intervention.io\/api\/rectangle)\n- [circle()](http:\/\/image.intervention.io\/api\/circle)\n- [ellipse()](http:\/\/image.intervention.io\/api\/ellipse)\n\n### Macros\n\nMacros are a basic method of [extending the Streams platform](extending).\n\n#### Defining Macros\n\nYou can define macros in a service provider.\n\n```php\nuse Streams\\Core\\Image\\Image;\n\nImage::macro('thumbnail', function () {\n    return $this->fit(148)->encode('jpg', 50);\n});\n```\n\n#### Applying Macros\n\n```php\n$thumbnail = Images::make('img\/foo.jpg')->thumbnail();\n```\n\n## Outputting Images\n\nUse output methods to display image data from an image object. The `img` method is used by default.\n\n#### img()\n\nUse the `img` method to return an `<img>` tag.\n\n```blade\n@verbatim{!! Images::make('img\/foo.jpg') !!}@endverbatim\n```\n\nThe first parameter can be an `alt` tag or array of attributes. If an alt tag is provided, the attributes can still be provided as a second parameter. Note this is the default output method when used in Blade.\n\n```php\nImages::make('img\/foo.jpg')->img('Foo Bar Image', ['width' => '100'])\n```\n\nNote that unmatched methods will pass through to set attribute values.\n\n```php\nImages::make('img\/foo.jpg')->width(100)->img('Foo Bar Image')\n```\n\n#### url()\n\nUse the `url` method to output a URL to the image. The first argument may be an array of query string parameters to append. The second argument can be used to force secure URLs. If not specified, the URLs will use the protocol of the request. If \n\n```php\nImages::make('img\/foo.jpg')->url()\n\n\/\/ Append a manual version query parameter.\nImages::make('img\/foo.jpg')->url(['version' => 'v1'])\n```\n\n#### inline()\n\nUse the `inline` method to return an `<img>` tag with a **base64** encoded **src**.\n\n```blade\n@verbatim{!! Images::inline('img\/foo.jpg') !!}@endverbatim\n```\n\nThe first parameter can be an `alt` tag or array of attributes. If an alt tag is provided, the attributes can still be provided as a second parameter. Note this is the default output method when used in Blade.\n\n```php\nImages::make('img\/foo.jpg')->inline('Foo Bar')\n```\n\n#### base64()\n\nUse the `base64` method to return a base64 encoded string.\n\n```blade\n@verbatim<img src=\"{!! Images::make('img\/foo.jpg')->base64() !!}\">@endverbatim\n```\n\n#### css()\n\nUse the `css` method to return a `url()` string for use in CSS backgrounds.\n\n```blade\n@verbatim<div style=\"background: {!! Images::make('img\/foo.jpg')->css() !!};\">@endverbatim\n```\n\n#### data()\n\nThe `data` method will return the contents of the image as a string.\n\n```php\necho Images::make('img\/foo.jpg')->data()\n```\n\n### Responsive Images\n\n#### srcsets()\n\n```php\nImages::make('img\/foo.jpg')\n    ->srcsets([\n        '1x' => [\n            'resize'  => 400,\n            'quality' => 60\n        ],\n        '2x' => [\n            'resize'  => 800,\n            'quality' => 90\n        ],\n        '640w' => [\n            'resize'  => 800,\n            'quality' => 90\n        ]\n    ]);\n```\n\n#### srcset()\n\n```php\nImages::make('img\/foo.jpg')\n    ->srcset([\n        '(min-width: 600px) 400px' => [\n            'intrinsic' => 400,\n            'resize' => 400,\n            'quality' => 60\n        ],\n        '(min-width: 1600px) 800px' => [\n            'intrinsic' => 800,\n            'resize' => 800,\n            'quality' => 90\n        ]\n    ])->img();\n```\n\n#### picture()\n\n```php\nImages::make('img\/foo.jpg')\n    ->resize(1800) \/\/ Fallback\n    ->picture([\n        '(min-width: 600px)' => [\n            'resize'  => 400,\n            'quality' => 60\n        ],\n        '(min-width: 1600px)' => [\n            'resize'  => 800,\n            'quality' => 90\n        ]\n    ]);\n```\n","href":"\/docs\/core\/images","package":"Streams Core"},{"id":"installation","title":"Installation","category":"getting_started","intro":null,"enabled":true,"body":"\n## Downloading\n\nThis package is added to existing Laravel projects as a dependency by requiring it with Composer.\n\n```bash\ncomposer require streams\/core:2.0.x-dev\n```\n\n### Cloning with Git\n\n```bash\ngit clone git@github.com:laravel-streams\/streams-core.git\n```\n\n## Updating\n\nFrom within your project, use Composer to update this individual package:\n\n```bash\ncomposer update streams\/core --with-dependencies\n```\n\nYou can also update your entire project using `composer update`.\n","href":"\/docs\/core\/installation","package":"Streams Core"},{"id":"integer","title":"Integer Type","link_title":"Integer","intro":"Store integer values.","category":"field_types","stage":"drafting","enabled":true,"body":"\n## Overview\n\nThe `integer` field type stores whole number values.\n\n```json\n\/\/ streams\/example.json\n\"fields\": {\n    \"count\": {\n        \"type\": \"integer\"\n    }\n}\n```\n\n\n## Data Structure\n\n```json\n{\n    \"count\": 100\n}\n```\n\nBasic value access displays the stored value:\n\n```blade\n@verbatim\/\/ Basic access\n{{ $entry->count }}@endverbatim\n```\n\n### Decorator Usage\n\nBoolean types also provide decorated values.\n\n```blade\n@verbatim\/\/ Decorated value\n@if ($entry->count()->isEven())\n    \/\/ ...\n@endif@endverbatim\n```\n\n#### Methods\n\n@todo Generate methods from @docs\n\n## Configuration\n\n@todo Generate config options from class::configuration\n\n```json\n\/\/ streams\/example.json\n\"fields\": {\n    \"count\": {\n        \"type\": \"integer\",\n        \"config\": {\n            \"default\": \"increment\"\n        }\n    }\n}\n```\n","href":"\/docs\/core\/integer","package":"Streams Core"},{"id":"introduction","title":"Streams Core","link_title":"Introduction","intro":"Streams Core is the foundation of the Streams platform.","stage":"drafting","enabled":true,"sort":1,"body":"\n## Introduction\n\nStreams Core provides the most fundamental features offered by the Streams platform. It is the only required dependency which the rest of the system addons build upon.\n\n### Data First\n\nIt is good to approach Laravel Streams from the entry point *of* the streams your project needs. \n\n- [Streams](streams)\n\n## Application Support\n\nStreams Core helps you take Laravel further and in less time.\n\n- [Views](views)\n- [Routing](routing)\n- [Security](security)\n\n### Frontend Support\n\nStreams Core provides frontend support that encourages and supports best-practices.\n\n- [Assets](assets)\n- [Images](images)\n\n### Developer Support\n\nThese juicy tools are specifically for developers. \n\n<!-- - [Support](support) -->\n- [Addons](addons)\n- [Applications](applications)\n- [Extending Laravel Streams](extending)\n\n### Data Modeling\n\nData modeling is *the* fundamental function of Streams Core.\n\n- [Streams](streams)\n- [Entries](entries)\n- [Fields](fields)\n- [Validation](validation)\n","href":"\/docs\/core\/introduction","package":"Streams Core"},{"id":"markdown","title":"Markdown Type","link_title":"Markdown","intro":"Store [markdown](https:\/\/commonmark.org\/help\/) formatted text.","category":"field_types","stage":"drafting","enabled":true,"body":"\n## Overview\n\nThe `markdown` field type stores markdown formatted text.\n\n```json\n\/\/ streams\/example.json\n\"fields\": {\n    \"content\": {\n        \"type\": \"markdown\"\n    }\n}\n```\n\n## Data Structure\n\n```json\n{\n    \"content\": \"An **example** string.\"\n}\n```\n\nBasic value access displays the unparsed value:\n\n```blade\n@verbatim\/\/ Basic access\n{{ $entry->content }}\n@endverbatim\n```\n\n### Decorator Usage\n\nTo get anything out of your stored value you will need to expand it.\n\n```blade\n@verbatim\/\/ Parsed value\n{{ $entry->content()->parse() }}\n\n\/\/ Parsed and rendered value\n{{ $entry->content()->render($payload) }}\n@endverbatim\n```\n\n#### Methods\n\n@todo Generate methods from @docs\n\n\n\n## Configuration\n\n@todo Generate config options from class::configuration\n","href":"\/docs\/core\/markdown","package":"Streams Core"},{"id":"messages","title":"Messages","category":"basics","intro":"Essential flash messages.","enabled":true,"sort":20,"body":"\n## Introduction\n\nThe Streams platform provides an implementation agnostic service to include messages with the application response.\n\n#### Flash Messages\n\nMessages will display once, and on the next page load. This is used for **view** responses.\n\n#### API Messages\n\nMessages can provide standardized [API errors](\/docs\/api\/errors).\n\n## Basic Usage\n\nWithin your code, before the response is generated, make a call to the `Messages` facade.\n\n```php\nuse Streams\\Core\\Support\\Facades\\Messages;\n\npublic function example()\n{\n    Messages::success('Welcome aboard!');\n\n    return home();\n}\n```\n\n### Error Types\n\nYou may also perform:\n\n```php\nMessages::success(): \/\/ Set the flash theme to \"success\".\nMessages::error(): \/\/ Set the flash theme to \"danger\".\nMessages::warning(): \/\/ Set the flash theme to \"warning\".\nMessages::overlay(): \/\/ Render the message as an overlay.\nMessages::overlay([\n    'title' => 'Modal Title'\n    'message' => 'Modal Message',\n]): \/\/ Display a modal overlay with a title.\nMessages::danger(): \/\/ Render a \"danger\" flash message that must be dismissed.\nMessages::important(): \/\/ Add a close button to the flash message.\n```\n\n### Displaying Messages\n\nWith this message flashed, you may now display it in your views. Because messages and overlays are so common, we provide a template out of the box to get you started. You're free to use - and even modify to your needs - this template how you see fit.\n\n```blade\n@verbatim@include('streams::messages')@endverbatim\n```\n\n#### Custom Markup\n\nAny array data passed in, including the two mandatory **type** and **content** values.\n\n```blade\n@verbatim<ul>\n@foreach (Messages::pull() as $message)\n    <li>{{ $message->type }}: {{ $message->content }}<\/li>\n@endforeach@endverbatim\n<\/ul>\n```\n","href":"\/docs\/core\/messages","package":"Streams Core"},{"id":"multiselect","title":"Multiselect Type","link_title":"Multiselect","intro":"Store multiple enumerated values.","category":"field_types","stage":"drafting","enabled":true,"body":"\n## Overview\n\nThe `multiselect` field type stores an array of selections from a list of options. The multiselect field type also supports [callable options](#callable-options).\n\n```json\n\/\/ streams\/users.json\n\"fields\": {\n    \"picks\": {\n        \"type\": \"multiselect\",\n        \"config\": {\n            \"options\": {\n                \"star\": \"Star\",\n                \"circle\": \"Circle\",\n                \"umbrella\": \"Umbrella\",\n                \"triangle\": \"Triangle\"\n            }\n        }\n    }\n}\n```\n\n#### Callable Options\n\nBesides basic array and associated arrays, you may specify a callable string:\n\n```json\n{\n    \"type\": \"multiselect\",\n    \"config\": {\n        \"options\": \"\\\\App\\\\CustomOptions@handle\"\n    }\n}\n```\n\nThe `$type` can be injected in order aid in returning options:\n\n```php\n\/\/ app\/CustomOptions.php\nclass CustomOptions\n{\n    public function handle($type)\n    {\n        return [\n            'foo' => 'Foo',\n            'bar' => 'Bar',\n        ];\n    }\n}\n```\n\n## Data Structure\n\n```json\n{\n    \"picks\": [\"circle\", \"triangle\"]\n}\n```\n\nBasic value access displays the stored key value:\n\n```blade\n@verbatim\/\/ Basic access\n[{{ implode(', ', $entry->picks) }}]@endverbatim\n```\n\n### Decorator Usage\n\nMultiselect types also provide decorated values.\n\n```blade\n@verbatim\/\/ Decorated value\n[{{ implode(',' $entry->picks()->values()) }}]@endverbatim\n```\n\n#### Methods\n\n@todo Generate methods from @docs\n\n## Configuration\n\n@todo Generate config options from class::configuration\n","href":"\/docs\/core\/multiselect","package":"Streams Core"},{"id":"number","title":"Number Type","link_title":"Number","intro":"Store numeric values.","category":"field_types","stage":"drafting","enabled":true,"body":"\n## Overview\n\nThe `number` field type stores numeric values including floating point numbers. If you need to support fixed-precision numbers, check out the [decimal](decimal) field type.\n\n```json\n\/\/ streams\/example.json\n\"fields\": {\n    \"price\": {\n        \"type\": \"number\"\n    }\n}\n```\n\n### Configuration\n\n@todo Generate config options from class::configuration\n\n\n## Data Structure\n\n```json\n{\n    \"price\": 89.95\n}\n```\n\nBasic value access displays the stored value:\n\n```blade\n@verbatim\/\/ Basic access\n{{ $entry->price }}@endverbatim\n```\n\n### Decorator Usage\n\nBoolean types also provide decorated values.\n\n```blade\n@verbatim\/\/ Decorated value\n@if ($entry->price()->isOdd())\n    \/\/ ...\n@endif@endverbatim\n```\n\n#### Methods\n\n@todo Generate methods from @docs\n","href":"\/docs\/core\/number","package":"Streams Core"},{"id":"object","title":"Object Type","link_title":"Object","category":"field_types","intro":"The `object` field type stores structured `key:value` data.","stage":"drafting","enabled":true,"body":"\n## Overview\n\nThe `object` field type is used for storing objects. Objects can be simple or complex types. By default, any type is valid.\n\n```json\n\/\/ streams\/example.json\n\"fields\": {\n    \"address\": {\n        \"type\": \"object\"\n    }\n}\n```\n\n### Data Structure\n\n```json\n{\n    \"address\": {\n        \"street\": \"3159 W 11th St\",\n        \"city\": \"Cleveland\",\n        \"state\": \"OH\"\n    }\n}\n```\n\nBasic object access:\n\n```blade\n@verbatim\/\/ Array access\n{{ $entry->address->street }}\n@endverbatim\n```\n\n### Decorator Usage\n\nThe decorated value provides an object as well.\n\n```blade\n@verbatim\/\/ Decorated value\n{{ $entry->address->street }}\n@endverbatim\n```\n\n#### Methods\n\n@todo Generate methods from @docs\n\n\n\n## Configuration\n\n@todo Generate config options from class::configuration\n\n### Schemas\n\nUse the `sdchemas` configuration to specify the allowed types. If specified, each item must be valid against one of the provided types.\n\n```json\n\/\/ streams\/example.json\n\"fields\": {\n    \"items\": {\n        \"type\": \"object\",\n        \"config\": {\n            \"schemas\": [\n                { \"stream\": \"addresses\" },\n                { \"abstract\": \"App\\\\Support\\\\Address\" }\n            ]\n        }\n    }\n}\n```\n","href":"\/docs\/core\/object","package":"Streams Core"},{"id":"parser","title":"Parsing Variables","category":"developers","enabled":true,"sort":90,"body":"\n## Introduction\n\nStreams parses variables within strings to allow dynamic configuration.\n\n### Request Variables\n\nThe following `request` variables are available:\n\n```php\n'request' => [\n    'url'      => Request::url(),\n    'path'     => Request::path(),\n    'root'     => Request::root(),\n    'input'    => Request::input(),\n    'full_url' => Request::fullUrl(),\n    'segments' => Request::segments(),\n    'uri'      => Request::getRequestUri(),\n    'query'    => Request::getQueryString(),\n    'parsed'   => array_merge($parsed, [\n        'domain' => explode('.', $parsed['host'])\n    ]),\n],\n```\n\n### URL Variables\n\nThe following `URL` variables are available:\n\n```php\n'url' => [\n    'previous' => URL::previous(),\n],\n```\n\n### Route Variables\n\nThe following `route` variables are available:\n\n```php\n'route' => [\n    'uri'                      => Request::route()->uri(),\n    'parameters'               => Request::route()->parameters(),\n    'parameters.to_urlencoded' => array_map(\n        function ($parameter) {\n            return urlencode($parameter);\n        },\n        array_filter(Request::route()->parameters())\n    ),\n    'parameter_names'          => Request::route()->parameterNames(),\n    'compiled'                 => [\n        'static_prefix'     => Request::route()->getCompiled()->getStaticPrefix(),\n        'parameters_suffix' => str_replace(\n            Request::route()->getCompiled()->getStaticPrefix(),\n            '',\n            Request::getRequestUri()\n        ),\n    ],\n],\n```\n\n@todo clean up and use table\/values.\n","href":"\/docs\/core\/parser","package":"Streams Core"},{"id":"querying","title":"Criteria","link_title":"Querying","category":"database","intro":"An extensible, fast, and database-indifferent querying API.","stage":"outlining","enabled":true,"sort":9,"body":"\n## Introduction\n\nQuerying builds upon knowledge of [streams](streams), [fields](fields), and [entries](entries). Using the querying techniques below you can retreive, insert, and update stream configured entry data.\n\n### Getting Started\n\nTo initialize a new query use the `Streams::entries()` method.\n\n```php\nuse Streams\\Core\\Support\\Facades\\Streams;\n\n$query = Streams::entries('contacts');\n```\n\n## The Basics\n\nYou can **chain** the below methods together to build query logic and return a collection of **results**.\n\n```php\nuse Streams\\Core\\Support\\Facades\\Streams;\n\n$results = Streams::entries('contacts')\n    ->where('email', 'like', '%@gmail.com')\n    ->orderBy('name', 'asc')\n    ->get();\n```\n\n### Filtering\n\n#### Basic Where Clauses\n\nYou may use the `where` method on a query instance to add where clauses to the query. The most basic call to where requires three arguments. The first argument is the handle of the **field**. The second argument is an operator, which can be any of the database's supported operators including **IN** and **NOT IN**. Finally, the third argument is the value to evaluate against the field value.\n\nFor example, here is a query that verifies the value of the \"votes\" column is equal to 100:\n\n```php\n$users = Streams::entries('users')->where('votes', '=', 100)->get();\n```\n\nFor convenience, if you want to verify that a field is equal to a given value, you may pass the value directly as the second argument to the where method:\n\n```php\n$users = Streams::entries('users')->where('votes', 100)->get();\n```\n\nYou may use a variety of other operators when writing a where clause:\n\n```php\n$users = Streams::entries('users')\n    ->where('votes', '>=', 100)\n    ->get();\n\n$users = Streams::entries('users')\n    ->where('votes', '<>', 100)\n    ->get();\n\n$users = Streams::entries('users')\n    ->where('name', 'like', 'T%')\n    ->get();\n```\n\n#### Or Statements\n\nYou may chain where constraints together as well as add **or** clauses to the query. The orWhere method accepts the same arguments as the where method:\n\n```php\n$users = Streams::entries('users')\n    ->where('votes', '>', 100)\n    ->orWhere('name', 'John')\n    ->get();\n```\n\n### Sorting\/Ordering\n\nThe `orderBy` method allows you to sort the result of the query by a given field. The first argument to the `orderBy` method should be the field you wish to sort by, while the second argument controls the direction of the sort and may be either `asc` or `desc`:\n\n```php\n$users = Streams::entries('users')\n    ->orderBy('name', 'desc')\n    ->get();\n```\n\nIf you need to sort by multiple fields, you may invoke `orderBy` as many times as needed:\n\n```php\n$users = Streams::entries('users')\n    ->orderBy('name', 'desc')\n    ->orderBy('email', 'asc')\n    ->get();\n```\n\n### Limit\/Offset\n\nThe `limit` method allows you to limit the number of result returned by the query and an offset value. The first argument to the `limit` method should be the number of entries you wish to return, while the second argument controls the offset of the query, if any:\n\n```php\n\/\/ The first 10\n$users = Streams::entries('users')\n    ->limit(10)\n    ->get();\n\n\/\/ The next 10\n$users = Streams::entries('users')\n    ->limit(10, 10)\n    ->get();\n```\n\n### Pagination\n\nThe `paginate` method allows you to generate a paginated result. A [Laravel paginator](https:\/\/laravel.com\/docs\/pagination) instance is returned.\n\n```php\n$users = Streams::entries('users')->paginate(15);\n\necho $users->links(); \/\/ Render pagination\necho $users->items(); \/\/ Return all items\necho $users->total(); \/\/ Return total items\n```\n\n\n### Chunk\n\nThe `chunk` method allows you to chunk through large datasets without exhausting memory.\n\n```php\nStreams::entries('users')->chunk(1000, function ($users) {\n    $users->each(function ($user) {\n        echo $user->email;\n    });\n});\n```\n\n### Caching\n\nThe `cache` method allows you to cache query results. The first parameter should be the **seconds** in which to cache the results. An optional second parameter can be provided as a **key**, otherwise one will be generated based on your query **fingerprint**.\n\n```php\n$favorites = Streams::entries('books')\n    ->where('favorited', true)\n    ->cache(600, 'favorites')\n    ->get();\n```\n\nFor more information on managing cache please see the [cache documentation](caching).\n\n## Extending Queries\n\nThere are numerous techniques you can use to extend querying logic.\n\n### Extending Basics\n\nThe **query** object is `macroable`.\n\n- [Extending the Streams Platform](extending)\n\n### Query Criteria\n\nThe **criteria** interface serves as the wrapper for various query building logic.\n","href":"\/docs\/core\/querying","package":"Streams Core"},{"id":"relationship","title":"Relationship Type","link_title":"Relationship","intro":"Relate to any stream entry.","category":"field_types","stage":"drafting","enabled":true,"body":"\n## Overview\n\nA single relationship to a stream entry.\n\n```json\n\/\/ streams\/users.json\n\"fields\": {\n    \"user\": {\n        \"type\": \"relationship\",\n        \"config\": {\n            \"related\": \"users\"\n        }\n    }\n}\n```\n\n## Data Structure\n\n```json\n{\n    \"user\": \"655de760-6ba0-3f4f-ad0c-8051588ad6e2\"\n}\n```\n\nBasic value access displays the entry instance:\n\n```blade\n@verbatim\/\/ Basic access\n{{ $entry->user->email }}@endverbatim\n```\n\n### Decorator Usage\n\nThe decorated value also provides the same instance.\n\n```blade\n@verbatim\/\/ Decorated value\n{{ $entry->user()->email }}\n{!! $entry->user()->email()->mailto() !!}@endverbatim\n```\n\n#### Methods\n\n@todo Generate methods from @docs\n\n## Configuration\n\n@todo Generate config options from class::configuration\n\n```json\n\/\/ streams\/users.json\n\"fields\": {\n    \"user\": {\n        \"type\": \"relationship\",\n        \"config\": {\n            \"related\": \"users\"\n        }\n    }\n}\n```\n","href":"\/docs\/core\/relationship","package":"Streams Core"},{"id":"repositories","title":"Repositories","category":"database","intro":null,"stage":"outlining","enabled":true,"sort":10,"body":"\n## Introduction\n\nThe Streams platform separates methods to retrieve and store entries from the entry objects themselves via repositories.\n\n### Getting Started\n\nYou can initialize an entry repository using the `Streams::repository()` method and specifying the **stream**.\n\n```php\nuse Streams\\Core\\Support\\Facades\\Streams;\n\n\/\/ Start using the repository.\nStreams::repository('contacts');\n\n\/\/ You can also access from the stream.\nStreams::make('contacts')->repository();\n```\n\n### New Queries\n\nNew [queries](querying) can be started from the repository.\n\n```php\n\/\/ Start a new query.\nStreams::entries('contacts');\n\n\/\/ You can also start queries from the repository.\nStreams::repository('contacts')->newQuery();\n```\n\n## The Basics\n### Inserting Entries\n### Updating Entries\n### Deleting Entries\n## Extending Repositories\n### [Extending Basics](extending)\n### Custom Repositories\n","href":"\/docs\/core\/repositories","package":"Streams Core"},{"id":"routing","title":"Routing","category":"basics","intro":null,"sort":10,"stage":"reviewing","enabled":true,"todo":["Allow configuring view resolution patterns using tags (resources\/{stream}.blade.php, resources\/{singular}.blade.php, resources\/{stream}\/{action}.blade.php)"],"body":"\n## Introduction\n\nAll requests to your application are handled by **Laravel** unless you create the routes using one of the specific methods described below.\n\n## Defining Routes\n\nThe Streams platform has a couple of ways it routes requests, which are listed below. Otherwise, [standard Laravel routing applies](https:\/\/laravel.com\/docs\/routing).\n\n### Route Files\n\nYou can configure routes just as you would in a regular Laravel application using the `routes\/web.php` file.\n\n### Streams Router\n\nThe Streams platform provides a `Route::streams()` method for defining routes. *All streams-specific routing approaches pass through this method.*\n\n```php\n\/\/ Options\nRoute::streams('uri', [\n    'foo' => 'bar',\n]);\n\n\/\/ View\nRoute::streams('uri', 'view');\n\n\/\/ Controller\nRoute::streams('uri', 'App\\Http\\Controller\\Example@show');\n\n\/\/ Controller and more\nRoute::streams('uri', [\n    'uses' => 'App\\Http\\Controller\\Example@show'\n]);\n```\n\nThe first argument is the URI and the second is either:\n\n- The name of the [view](views) to render.\n- A callable string.\n- An array of [route options](#route-options).\n\n### Stream Routes\n\nDefining routes in your [stream configuration](streams#routing) makes it easy to automate naming and URL generation around your domain information and entities.\n\nDefine stream routes using a `action => options` format, where `options` is again either the URI, controller and method string, or an array of [route options](#route-options).\n\n```json\n\/\/ streams\/contacts.json\n{\n    \"routes\": {\n        \"index\": {\n            \"uri\": \"contacts\",\n            \"view\": \"contacts\"\n        },\n        \"view\": {\n            \"uri\": \"contacts\/{id}\",\n            \"view\": \"contact\"\n        },\n        \"profile\": {\n            \"uri\": \"contacts\/{id}\",\n            \"view\": \"profile\"\n        }\n    }\n}\n```\n\n#### Automatic Naming\n\nUnless a [route name](#named-routes) is specified, stream configured routes automatically name themselves like `streams::{stream}.{action}`.\n\n```php\n$url = route('streams::contacts.index');\n```\n\n#### Automatically Resolved Views\n\nUnless a view is specified, the associated requests will attempt to resolve a view automatically.\n\n```json\n\/\/ streams\/contacts.json\n{\n    \"routes\": {\n        \"index\": {\n            \"uri\": \"contacts\"\n            \/\/ resources\/contacts\/index.php\n        },\n        \"view\": {\n            \"uri\": \"contacts\/{id}\"\n            \/\/ resources\/contacts\/view.php\n        },\n        \"rss\": {\n            \"uri\": \"contacts\/{id}\/rss\"\n            \/\/ resources\/contacts\/rss.php\n        }\n    }\n}\n```\n\nYou can configure automatic view patterns within the `streams\/route.php` [configuration file](configuration). The process ignores the views if they do not exist.\n\n## Route Parameters\n\nThe Streams platform adds support for deep parameter variables using a dot notation when using the `URL::streams()` method to [generate URLs](#generating-urls).\n\n```php\nURL::streams('uri\/{foo.bar}', 'view');\n```\n\n### Stream Parameter\n\nYou can specify the stream associated with the route using the [route option](#streams) or by using the `{stream}` URI segment variable in your URI pattern to resolve the stream by its handle.\n\n```php\nRoute::streams('address-book\/{stream}', 'contacts');\n```\n\nConsider locking down this routing pattern using a [parameter constraint](#parameter-constraints).\n\n```php\nRoute::streams('address-book\/{stream}', [\n    'view' => 'contacts.list',\n    'constraints' => [\n        'stream' =>  '(businesses|family)'\n    ],\n]);\n```\n\nThe resolved stream will be available within the view:\n\n```blade\n@verbatim<h1>{{ $stream->name }}<\/h1>\n\n<ul>\n    @foreach ($stream->entries()->get() as $entry)\n    <li>{{ $entry->name }}<\/li>\n    @endforeach\n<\/ul>@endverbatim\n```\n\n### Entry Parameters\n\nYou can specify a stream entry associated with the route using the [route option](#entries) or by using the `{id}` URI segment variable in your URI pattern to resolve the entry by its ID or handle.\n\n```php\nRoute::streams('address-book\/{stream}\/{id}', 'contacts');\n```\n\nYou can also use `{entry.*}` parameters to query the entry by its field values.\n\n```php\n\/\/ address-book\/contacts\/ryan@example.com\nRoute::streams('address-book\/{stream}\/{entry.email}', 'contacts');\n```\n\nThe first matching entry will be available within the view:\n\n```php\n@verbatim<h1>{{ $entry->name }}<\/h1>@endverbatim\n```\n\nA `404` error page will be displayed entry resolution is attempted, but no entry is found.\n\n## Route Options\n\nAll Streams platform-specific methods of registering routes support the following route options.\n\nAll route options are parsed with [controller data](controllers):\n\n```php\nRoute::streams('address-book\/{stream}\/{id}', [\n    'view' => '{streams.handle}',\n]);\n```\n\n### View\n\nUse the `view` option to specify a [view](views) to render:\n\n```php\nRoute::streams('uri', [\n    'foo' => 'bar',\n    'view' => 'example',\n]);\n```\n\n### Stream\n\nUse the `stream` option to specify the stream associated with the request. [Stream configured routes](#stream-routes) will do this automatically.\n\n```php\nRoute::streams('uri', [\n    'stream' => 'contacts',\n]);\n```\n\nThe stream is automatically injected into the view:\n\n```blade\n@verbatim<h1>{{ $stream->name }}<\/h1>\n\n<ul>\n    @foreach ($stream->entries()->get() as $entry)\n    <li>{{ $entry->name }}<\/li>\n    @endforeach\n<\/ul>@endverbatim\n```\n\n### Entry\n\nYou can also specify a specific entry identifier:\n\n```php\nRoute::streams('uri', [\n    'stream' => 'contacts',\n    'entry' => 'john_smith',\n]);\n```\n\nThe stream entry is automatically injected into the view:\n\n```blade\n\/\/ uri\/ryan_thompson\n@verbatim<h1>{{ $entry->name }}<\/h1>@endverbatim\n```\n\nYou can use entry fields to query entries for the view.\n\n```php\n\/\/ uri\/ryan@example.com\nRoute::streams('uri\/{entry.email}', [\n    'stream' => 'contacts',\n]);\n```\n\nYou can also hard code the entry ID or handle:\n\n```php\nRoute::streams('uri', [\n    'stream' => 'contacts',\n    'entry' => 'ryan_thompson',\n]);\n```\n\nThe first result is automatically injected into the view:\n\n```blade\n\/\/ uri\/ryan_thompson\n@verbatim<h1>{{ $entry->name }}<\/h1>@endverbatim\n```\n\n### Redirect\n\nUse the `redirect` and optional `status_code` option to specify a redirect:\n\n```php\nRoute::streams('uri\/{entry.name}', [\n    'redirect' => '\/new\/uri',\n    'status_code' => 301, \/\/ Default\n]);\n```\n\nRedirects highlight a good use case to leverage the fact that route options are parsed with controller data:\n\n```php\nRoute::streams('uri\/{entry.name}', [\n    'redirect' => '\/new\/uri\/{stream.id}\/{entry.name}',\n    'status_code' => 301, \/\/ Default\n]);\n```\n\n#### Native Redirects\n\nYou can create [Laravel redirects](https:\/\/laravel.com\/docs\/routing#redirect-routes) in your `routes\/web.php` using the `Route` facade as well:\n\n``` php\nRoute::redirect('\/from', '\/to');\nRoute::redirect('\/from', '\/to', 301);\nRoute::permanentRedirect('\/from', '\/to');\n```\n\n### Named Routes\n\nUse the `as` option to specify the name of the route:\n\n```php\nRoute::streams('uri', [\n    'view' => 'example',\n    'as' => 'login',\n]);\n```\n\nYou can refer to the route by name using the typical Laravel methods:\n\n```php\n$url = route('login');\n```\n\n### HTTP Verbs\n\nUse the `verb` option to specify the HTTP verb the route should respond to:\n\n```php\nRoute::streams('uri', ['verb' => 'any']);\nRoute::streams('uri', ['verb' => 'get']); \/\/ Default\nRoute::streams('uri', ['verb' => 'put']);\nRoute::streams('uri', ['verb' => 'post']);\nRoute::streams('uri', ['verb' => 'patch']);\nRoute::streams('uri', ['verb' => 'delete']);\nRoute::streams('uri', ['verb' => 'options']);\n```\n\n### Route Middleware\n\nUse the `middleware` option to assign additional middleware to the route:\n\n```php\nRoute::streams('uri', [\n    'middleware' => ['first', 'second']\n]);\n```\n\n### Parameter Constraints\n\nUse the `constraints` option to specify allowed parameter formatting for the route using regular expression:\n\n```php\nRoute::streams('uri\/{name}', [\n    'constraints' => ['name' => '[A-Za-z]+']\n]);\n```\n\nLaravel does not support dots in parameter names at this time. For this reason, `{entry.name}` type parameters transform into `{entry__name}`.\n\n```php\nRoute::streams('uri\/{entry.name}', [\n    'constraints' => ['entry__name' => '[A-Za-z]+']\n]);\n```\n\n### Disabling CSRF\n\nYou can disable CSRF protection using the **csrf** option.\n\n```php\nRoute::streams('uri', [\n    'csrf' => false\n]);\n```\n\n### Deferring Routes\n\nUse the `defer` option to defer registering a route.\n\n```php\nRoute::streams('\/{id}', [\n    \/\/ ...\n    'defer' => true,\n]);\n```\n\n## Generating URLs\n\nYou may use the `URL::streams()` method to generate URLs for named routes, including those with dotted parameter variables. This method also supports parsing URL strings with parameter data. The `extra` data argument is appending as a query string. Use the `absolute` argument to control whether the resulting URL is absolute or not.\n\n```php\nURL::streams($target, $parameters = [], $extra = [], $absolute = true);\n\n$entry = Streams::entries('contacts')->first();\n\n\/\/ contacts\/{entry.email}\/{entry.id}\n$url = URL::streams('streams::contacts.view', ['entry' => $entry]);\n\n\/\/ contacts\/{email}\/{id}\n$url = URL::streams('streams::contacts.view', $entry);\n```\n\nYou can also use [Laravel URL generation](https:\/\/laravel.com\/docs\/routing#named-routes) for named routes, though dotted parameters are not supported using Laravel methods:\n\n```php\n\/\/ Generating URLs.\n$url = route('streams::contacts.index');\n\n\/\/ Generating Redirects.\nreturn redirect()->route('streams::contacts.index');\n```\n\n## Error Pages\n\nErrors render views based on the status code of the error. For example, a `404` error will look a view in `resources\/views\/errors\/{status_code}.blade.php`.\n\nLaravel will automatically render a `404` page for any unhandled routes.\n\n- [Laravel Custom Error Pages](https:\/\/laravel.com\/docs\/errors#custom-http-error-pages)\n","href":"\/docs\/core\/routing","package":"Streams Core"},{"id":"security","title":"Security","category":"basics","intro":null,"stage":"outlining","enabled":true,"sort":99,"todo":null,"body":"\n## CSRF\n\nThe Streams platform build on [Laravel CSRF basics](https:\/\/laravel.com\/docs\/csrf).\n\n### Route Option\n\nYou can also disable CSRF protection using [route options](routing#route-options).\n\n```json\n\"csrf\": false\n```\n \n```php\nRoute::streams('uri', [\n    'csrf' => false\n]);\n```\n\n## Policies\n\nThe Streams platform uses [policies](policies) to authorize secured actions.\n\n## Users\n\nThe Streams platform makes it easy to use and integrate any authentication system or roll your own based on your projects needs.\n\n## Resources\n\n-   [@todo Example Users](#example-users)\n","href":"\/docs\/core\/security","package":"Streams Core"},{"id":"select","title":"Select Type","link_title":"Select","intro":"Store enumerated values.","category":"field_types","stage":"drafting","enabled":true,"body":"\n## Overview\n\nThe `select` field type stores a selection from a list of options.\n\n```json\n\/\/ streams\/users.json\n\"fields\": {\n    \"status\": {\n        \"type\": \"select\",\n        \"config\": {\n            \"options\": {\n                \"enabled\": \"Enabled\",\n                \"pending\": \"Pending\",\n                \"disabled\": \"Disabled\"\n            },\n            \"default\": \"pending\"\n        }\n    }\n}\n```\n\n#### Callable Options\n\nBesides basic array and associated arrays, you may specify an invokable class:\n\n```json\n{\n    \"type\": \"select\",\n    \"config\": {\n        \"options\": \"\\\\App\\\\InvokableOptions\"\n    }\n}\n```\n\nOr, callable class and method:\n\n```json\n{\n    \"type\": \"select\",\n    \"config\": {\n        \"options\": \"\\\\App\\\\CustomOptions@handle\"\n    }\n}\n```\n\nThe `$type` can be injected in order aid in returning options:\n\n```php\n\/\/ app\/InvokableOptions.php\nclass InvokableOptions\n{\n    public function __invoke($type)\n    {\n        return [\n            'foo' => 'Bar',\n        ];\n    }\n}\n\n\/\/ app\/CustomOptions.php\nclass CustomOptions\n{\n    public function handle($type)\n    {\n        return [\n            'foo' => 'Bar',\n        ];\n    }\n}\n```\n\n## Data Structure\n\n```json\n{\n    \"status\": \"enabled\"\n}\n```\n\nBasic value access displays the stored key value:\n\n```blade\n@verbatim\/\/ Basic access\n{{ $entry->status }}@endverbatim\n```\n\n### Decorator Usage\n\nSelect types also provide decorated values.\n\n```blade\n@verbatim\/\/ Decorated value\nStatus: {{ $entry->status()->value() }}@endverbatim\n```\n\n#### Methods\n\n@todo Generate methods from @docs\n\n## Configuration\n\n@todo Generate config options from class::configuration\n","href":"\/docs\/core\/select","package":"Streams Core"},{"id":"slug","title":"Slug Type","link_title":"Slug","category":"field_types","intro":"The `slug` field type stores `key:value` slug data.","stage":"drafting","enabled":true,"body":"\n## Overview\n\nThe `slug` field type is used for storing indexed arrays. Items can be simple or complex types. By default, any item type is valid.\n\n```json\n\/\/ streams\/example.json\n\"fields\": {\n    \"id\": {\n        \"type\": \"slug\"\n    }\n}\n```\n\n### Data Structure\n\n```json\n{\n    \"id\": \"john-doe\"\n}\n```\n\n#### Methods\n\n@todo Generate methods from @docs\n\n\n\n## Configuration\n\n@todo Generate config options from class::configuration\n","href":"\/docs\/core\/slug","package":"Streams Core"},{"id":"sources","title":"Sources","category":"database","intro":"Source adapters connect streams to any source of information you might encounter.","enabled":true,"sort":0,"body":"\n## Introduction\n\nSource adapters helps you query any source of data you might encounter in the wild.\n\n### Defining Sources \n\nSpecify **source** information in your [stream configuration](streams#defining-streams).\n\nIf no source is specified, the below defaults will be assumed.\n\n\n```json\n\/\/ streams\/{handle}.json\n{\n    \"config\": {\n        \"source\": {\n            \"format\": \"json\",\n            \"type\": \"filebase\",\n            \"path\": \"streams\/data\/{handle}\"\n        }\n    }\n}\n```\n\n\n## Available Sources\n\nThe following **sources** are available with the Streams platform by default.\n\n### Self\n\nYou can define data within on your stream configuration file.\n\n```json\n\/\/ streams\/contacts.json\n{\n    \"config\": {\n        \"source\": {\n            \"type\": \"self\"\n        }\n    },\n    \"data\": {\n        \"john\": {\n            \"name\": \"John Doe\"\n        },\n        \"jane\": {\n            \"name\": \"Jane Doe\"\n        }\n    }\n}\n```\n\n### Filebase\n\nThe flat file database powered by the fantastic [Filebase](https:\/\/github.com\/tmarois\/Filebase) package is the **default** source.\n\n\n```json\n\/\/ streams\/contacts.json\n{\n    \"config\": {\n        \"source\": {\n            \"format\": \"json\",\n            \"type\": \"filebase\",\n            \"path\": \"streams\/data\/contacts\"\n        }\n    }\n}\n```\n\n#### JSON Format\n\n```json\n\/\/ streams\/data\/contacts\/ryan.json\n{\n    \"name\": \"Ryan\",\n    \"email\": \"ryan@example.com\"\n}\n```\n\n#### YAML Format\n\n@verbatim\n```yaml\n\/\/ streams\/data\/contacts\/ryan.yaml\n\n---\n\nname: \"Ryan\"\nemail: \"ryan@example.com\"\n\n---\n\nThe body is built in: {{ $entry->name }}\n```\n@endverbatim\n\n#### MD Format\n\n@verbatim\n```markdown\n\/\/ streams\/data\/contacts\/ryan.md\n\n---\n\nname: \"Ryan\"\nemail: \"ryan@example.com\"\n\n---\n\nThe body is built in: {{ $entry->name }}\n```\n@endverbatim\n\n#### TPL Format\n@verbatim\n```template\n\/\/ streams\/data\/contacts\/ryan.tpl\n\n---\n\nname: \"Ryan\"\nemail: \"ryan@example.com\"\n\n---\n\nThe body is built in: {{ $entry->name }}\n```\n@endverbatim\n\n### Eloquent Model\n\nThe eloquent model source uses Laravel models to query and can return stream-enhanced Eloquent models.\n\n```json\n\/\/ streams\/contacts.json\n{\n    \"config\": {\n        \"source\": {\n            \"type\": \"eloquent\",\n            \"model\": \"App\\\\Contact\\\\ContactModel\"\n        }\n    }\n}\n```\n\n### Laravel Database\n\nThe Laravel database source uses generic Laravel database tables to query and return stream [entries](entries).\n\n```json\n\/\/ streams\/contacts.json\n{\n    \"config\": {\n        \"source\": {\n            \"type\": \"database\",\n            \"table\": \"contacts\",\n            \"connection\": \"default\"\n        }\n    }\n}\n```\n\n## Extending\n\nYou can create and register a custom source adapter for **any source of information** you might encounter.\n\n### Custom Sources\n\n**@todo Talk about developing custom source adapters.**\n","href":"\/docs\/core\/sources","package":"Streams Core"},{"id":"streams","title":"Streams","category":"core_concepts","intro":"Code-configured domain information.","sort":1,"stage":"drafting","enabled":true,"references":["https:\/\/craftcms.com\/docs\/3.x\/elements.html","https:\/\/craftcms.com\/docs\/3.x\/element-queries.html"],"todo":["Finish streams routes"],"body":"\n## Introduction\n\nThe Streams platform leans heavily on domain-driven design (DDD). We call these domain abstractions `streams`, hence our namesake.\n\nAn example could be configuring a domain model (a stream) for a website's pages, users of an application, or feedback submissions from a form. Streams describe your data structures.\n\n## Defining Streams\n\nUsing JSON files, you can define stream configurations in the `streams\/` directory. The filenames serve as the stream's `id`.\n\nIt is highly encouraged to use the plural form of a noun when naming Streams\u2014for example, contacts and people. Also, naming conventions like `business_contacts` or `neat-people` work well.\n\n```files\n\u251c\u2500\u2500 streams\/\n\u2502   \u251c\u2500\u2500 users.json\n\u2502   \u251c\u2500\u2500 pages.json\n\u2502   \u2514\u2500\u2500 contacts.json\n```\n\n### The Basics\n\nTo get started, you need only specify the `id`, which is the filename itself, and some `fields` to describe the domain object's structure.\n\nLet's create a little stream to hold information for a simple CRM.\n\n```json\n\/\/ streams\/contacts.json\n{\n    \"name\": \"Contacts\",\n    \"description\": \"A simple address book.\",\n    \"config\": {\n        \"source\": {\n            \"type\": \"filebase\",\n            \"filename\": \"streams\/data\/contacts\",\n            \"format\": \"json\"\n        },\n        \"abstract\": \"Streams\\\\Core\\\\Entry\\\\Entry\",\n        \"criteria\": \"Streams\\\\Core\\\\Criteria\\\\Criteria\",\n        \"repository\": \"Streams\\\\Core\\\\Repository\\\\Repository\",\n        \"collection\": \"Illuminate\\\\Support\\\\Collection\",\n    },\n    \"fields\": {\n        \"name\": \"string\",\n        \"email\": \"email\",\n        \"company\": {\n            \"type\": \"relationship\",\n            \"config\": {\n                \"related\": \"companies\"\n            }\n        }\n    }\n}\n```\n\n### Fields\n\n- [Fields](fields)\n- [Field Types](fields#field-types)\n\n**Fields** are an essential descriptor of the domain object. They describe what properties the domain object will have and how they work. Field **types** control things like accessors, data mutation, and casting.\n\nThe **field configuration keys** serve as a `handle`, which you can use to reference the field later. So, for example, you may access the above contact fields like this:\n\n```php\n$entry->email;\n$entry->company->email;\n```\n\n### Stream Routes\n\n- [Stream Routes](routing#stream-routes)\n- [Route Options](routing#route-optionss)\n\nStreams can simplify **routing** by defining associated routes in their definition.\n\n```json\n\/\/ streams\/contacts.json\n{\n    \"routes\": {\n        \"index\": \"contacts\",\n        \"view\": \"contacts\/{id}\"\n    }\n}\n```\n\nYou can also use an array to include other **route options**.\n\n```json\n\/\/ streams\/contacts.json\n{\n    \"routes\": {\n        \"contact\": {\n            \"csrf\": false,\n            \"uri\": \"form\/{entry.email}\"\n        }\n    }\n}\n```\n\n### Stream Validation\n\nStreams simplifies **validation** by defining validation in their definition.\n\n- [Defining Rules](validation#rule-configuration)\n\n```json\n\/\/ streams\/contacts.json\n{\n    \"rules\": {\n        \"name\": [\n            \"required\",\n            \"max:100\"\n        ],\n        \"email\": [\n            \"required\",\n            \"email:rfc,dns\"\n        ],\n        \"company\": \"required|unique\"\n    }\n}\n```\n\n### Security\n\nSpecify the [Laravel policy](https:\/\/laravel.com\/docs\/authorization#creating-policies) to use for [security](security).\n\n```json\n\/\/ streams\/contacts.json\n{\n    \"policy\": \"App\\\\Contacts\\\\ContactPolicy\"\n}\n```\n\n### Caching\n\nStreams provides a touch-free caching system you can define in the configuration.\n\n- [Defining Rules](validation#rule-configuration)\n\n```json\n\/\/ streams\/contacts.json\n{\n    \"cache\": false,\n    \"ttl\": 1800 \/\/ 30 minutes\n}\n```\n\n### Sources\n\nSources define the source information for entry data which you can define in the configuration.\n\n- [Defining Sources](sources#defining-sources)\n\n```json\n\/\/ streams\/contacts.json\n{\n    \"source\": {\n        \"type\": \"filebase\",\n        \"format\": \"md\"\n    }\n}\n```\n\n## Stream Entries\n\nDomain entities are called `entries` within the Streams platform. A stream defines entry attributes, or `fields`, that dictate the entry's properties, data-casting, and more.\n\n- [Defining Entries](entries#defining-entries)\n\n### Abstracts\n\nThe **abstract** parameter defines the class to use when constructing entry instances.\n\n- [Entry Abstracts](entries#entry-objects)\n\n```json\n\/\/ streams\/contacts.json\n{\n    \"abstract\": \"App\\\\Contacts\\\\Contact\"\n}\n```\n\n> When defining Elqouent stream sources, the sources model will be used as the abstract.\n\n### Criteria\n\nThe **criteria** parameter defines the class to use when building entry queries.\n\n- [Querying Entries](querying)\n\n```json\n\/\/ streams\/contacts.json\n{\n    \"criteria\": \"App\\\\Contacts\\\\ContactCriteria\"\n}\n```\n\n### Repositories\n\nThe **repository** parameter defines the repository class to use for the stream entries.\n\n- [Entry Repositories](repositories)\n\n```json\n\/\/ streams\/contacts.json\n{\n    \"repository\": \"App\\\\Contacts\\\\ContactRepository\"\n}\n```\n\n## Advanced Streams\n\n### JSON References\n\nYou can use JSON file references within stream configurations to point to other JSON files using the `@` symbol followed by a relative path to the file. In this way, you can reuse various configuration information or tidy up larger files. **The referenced file's JSON data directly replaces the reference.**\n\n```json\n\/\/ streams\/contacts.json\n{\n    \"name\": \"Contacts\",\n    \"fields\": \"@streams\/fields\/contacts.json\"\n}\n```\n\n```json\n\/\/ streams\/fields\/contacts.json\n{\n    \"name\": \"string\",\n    \"email\": \"email\",\n    \"company\": {\n        \"type\": \"relationship\",\n        \"stream\": \"company\"\n    }\n}\n```\n\n### Extend a Stream\n\nA stream can `extend` another stream, which works like a recursive **merge**.\n\n```json\n\/\/ streams\/family.json\n{\n    \"name\": \"Family Members\",\n    \"extend\": \"contacts\",\n    \"fields\": {\n        \"relation\": {\n            \"type\": \"select\",\n            \"config\": {\n                \"options\": {\n                    \"mother\": \"Mother\",\n                    \"father\": \"Father\",\n                    \"brother\": \"Brother\",\n                    \"sister\": \"Sister\"\n                }\n            }\n        }\n    }\n}\n```\n\nIn the above example, all `contacts` fields are available to you, as well as the new `relation` field.\n\n```php\n$entry->email;      \/\/ The email value.\n$entry->relation;   \/\/ The relation value.\n```\n\n### Stream Sources\n\nYou can configure the flat-file database as well as other sources for storing data including any Laravel database. No code changes required.\n","href":"\/docs\/core\/streams","package":"Streams Core"},{"id":"string","title":"String Type","link_title":"String","intro":"Store text values.","category":"field_types","stage":"drafting","enabled":true,"body":"\n## Overview\n\nThe `string` field type stores a basic string.\n\n```json\n\/\/ streams\/example.json\n\"fields\": {\n    \"name\": {\n        \"type\": \"string\"\n    }\n}\n```\n\n## Data Structure\n\n```json\n{\n    \"name\": \"John\"\n}\n```\n\nBasic value access displays encrypted value:\n\n```blade\n@verbatim\/\/ Basic access\n{{ $entry->name }}\n@endverbatim\n```\n\n### Decorator Usage\n\nStrings also provide decorated values.\n\n```blade\n@verbatim\/\/ Decorated value\n{{ implode('; ', $entry->example()->lines()) }}\n@endverbatim\n```\n\n#### Methods\n\n@todo Generate methods from @docs\n\n\n\n## Configuration\n\n@todo Generate config options from class::configuration\n","href":"\/docs\/core\/string","package":"Streams Core"},{"id":"support","title":"Support","category":"developers","intro":null,"stage":"drafting","enabled":true,"sort":9,"body":"\n## Introduction\n\nStreams Core expands upon Laravel support utilities. These features both provide internal functionalities and can be easily integrated into your own work.\n\n## Laravel Support\n\n### Arrays\n\nThe following methods have been added to Laravel's [array helper](https:\/\/laravel.com\/docs\/helpers#arrays).\n\n```php\nuse Illuminate\\Support\\Arr;\n\nArr::make($target);\n```\n\n#### Arr::make()\n\nConvert the target recusively to array values. This method leverages `toArray` and public propertis of objects to resolve arrays as well.\n\n```php\nArr::make($target);\nArr::make($collection);\n```\n\n#### Arr::parse()\n\nRecusively [parse](#str-parse) an array of target values. This method leverages `Arr::make()` to ensure an array target.\n\n```php\nArr::parse($target, $entry);\nArr::make($target, ['entry' => $entry]);\n```\n\n#### Arr::undot()\n\nConverts array keys with dots to nested key values. This is the opposite of Laravel's [Arr::dot()](https:\/\/laravel.com\/docs\/helpers#method-array-dot) method.\n\n```php\n$dotted = [\n    'foo.bar' => 'baz'\n];\n\n$undotted = Arr::undot($dotted);\n\narray:1 [\n  \"foo\" => array:1 [\n    \"bar\" => \"baz\"\n  ]\n]\n```\n\n### Strings\n\nThe following methods have been added to Laravel's [string helper](https:\/\/laravel.com\/docs\/helpers#strings).\n\n```php\nuse Illuminate\\Support\\Str;\n\nStr::humanize($value);\n```\n\n#### Str::parse()\n\nThe `parse` method parses the **target** string with the **payload** array using a dot notation.\n\n```php\n$payload = [\n    'foo' => [\n        'bar' => 'baz',\n    ],\n];\n\n\/\/ Example: baz\nStr::parse('Example {foo.bar}', $payload);\n\n\/\/ Hi Ryan\nStr::parse('Hi {name}', $entry);\n```\n\n#### Str::purify()\n\nVigurously cleanse the **target** value of any impure content or malicious intent.\n\n```php\n$clean = Str::purify($dirty);\n```\n\n#### Str::humanize()\n\nHumanize a [string slug](https:\/\/laravel.com\/docs\/helpers#method-fluent-str-slug). This method returns all **lowercase**.\n\n```php\n$segment = 'streams-platform_v2';\n\n\/\/ streams platform v2\n$title = Str::humanize($segment);\n\n\/\/ Streams Platform V2\necho ucwords($title);\n```\n\n#### Str::markdown()\n\nParse a markdown string using the fantastic [Parsedown package](https:\/\/github.com\/erusev\/parsedown). You \n\n```php\n$markdown = '#Hello';\n\n\/\/ <h1>Hello<\/h1>\necho Str::markdown($markdown);\n```\n\n#### Str::linkify()\n\nWrap all URLs within **target** with links.\n\n```php\n$urls = 'Example: https:\/\/streams.dev\/docs';\n\n\/\/ Example: <a href=\"https:\/\/streams.dev\/docs\">https:\/\/streams.dev\/docs<\/a>\necho Str::linkify($urls);\n```\n\n#### Str::truncate()\n\nTruncate a string **value** to a given **length**. A third **end** argument maybe be used to specify the string ending which defaults to \"**...**\".\n\n```php\n$lengthy = 'My long winded introduction has to start with my childhood.';\n\n\/\/ My long winded intro...\necho Str::truncate($lengthy, 20);\n```\n\n## Streams Support\n","href":"\/docs\/core\/support","package":"Streams Core"},{"id":"time","title":"Time Type","link_title":"Time","intro":"Store time values.","category":"field_types","stage":"drafting","enabled":true,"body":"\n## Overview\n\nThe `time` field type stores only time.\n\n```json\n\/\/ streams\/example.json\n\"fields\": {\n    \"starts_at\": {\n        \"type\": \"time\"\n    }\n}\n```\n\n### Configuration\n\n@todo Generate config options from class::configuration\n\n\n## Data Structure\n\n```json\n{\n    \"starts_at\": \"09:30:00\"\n}\n```\n\nBasic value access returns the stored value:\n\n```blade\n@verbatim\/\/ Basic access\n{{ $entry->starts_at }}@endverbatim\n```\n\n### Decorator Usage\n\nDate types also provide decorated values which returns a [Carbon](https:\/\/carbon.nesbot.com\/) instance.\n\n```blade\n@verbatim\/\/ Decorated value\n{{ $entry->startsAt()->format('g:i a') }}@endverbatim\n```\n\n#### Methods\n\n@todo Generate methods from @docs\n","href":"\/docs\/core\/time","package":"Streams Core"},{"id":"url","title":"URL Type","link_title":"URL","intro":"Store URL strings.","category":"field_types","stage":"drafting","enabled":true,"body":"\n## Overview\n\nThe `url` field type stores a url string.\n\n```json\n\/\/ streams\/example.json\n\"fields\": {\n    \"website\": {\n        \"type\": \"url\"\n    }\n}\n```\n\n## Data Structure\n\n```json\n{\n    \"website\": \"https:\/\/website.com\"\n}\n```\n\nBasic value access displays the stored value:\n\n```blade\n@verbatim\/\/ Basic access\n{{ $entry->website }}@endverbatim\n```\n\n### Decorator Usage\n\nStrings also provide decorated values.\n\n```blade\n@verbatim\/\/ Decorated value\n@if ($entry->website)\n    {!! $entry->website()->to('Visit Website') !!}\n@endif@endverbatim\n```\n\n#### Methods\n\n@todo Generate methods from @docs\n\n\n\n## Configuration\n\n@todo Generate config options from class::configuration\n","href":"\/docs\/core\/url","package":"Streams Core"},{"id":"validation","title":"Validation","category":"database","intro":"Organizing and executing data validation rules.","stage":"outlining","enabled":true,"sort":11,"references":["https:\/\/laravel.com\/docs\/validation"],"body":"\n## Introduction\n\nThe Streams platform provides a simple interface to leverage Laravel's own validation. Please make sure you are familiar with basic [Laravel validation](https:\/\/laravel.com\/docs\/validation) before proceeding.\n\n## Defining Rules\n\nThe Streams platform leans heavily on native Laravel validation, streamlines the process, and allows flexibility to adjust this behavior entirely.\n\n### Rule Configuration\n\nAll Streams rule configurations are defined as an array of rules on the field in which they apply to.\n\n#### Defining Rules\n\nYou may define **rules** whithin the [field configuration](fields#defining-fields):\n\n```json\n\/\/ streams\/contacts.json\n{\n    \"fields\": {\n        \"name\": {\n            \"type\": \"string\",\n            \"rules\": [\"required\", \"max:100\"]\n        },\n        \"email\": {\n            \"type\": \"email\",\n            \"rules\": [\"unique\", \"required\"]\n        },\n        \"company\": {\n            \"type\": \"relationship\",\n            \"config\": {\n                \"related\": \"companies\"\n            },\n            \"rules\": [\"required\"]\n        }\n    }\n}\n```\n\n#### Custom Rules\n\nYou may also define [custom validation rules](https:\/\/laravel.com\/docs\/validation#custom-validation-rules) for fields.\n\n```json\n\/\/ streams\/contacts.json\n{\n    \"fields\": {\n        \"name\": {\n            \"type\": \"string\",\n            \"rules\": [\n                \"required\",\n                \"App\\\\Rules\\\\Example\"\n            ]\n        }\n    }\n}\n```\n\n## Validating\n\nBeing that data validation is a fundamental principle, all validation typically operates around the domain objects.\n\n### Entry Validator\n\nYou can return a pre-loaded validator instance directly from the entry itself.\n\n```php\nuse Streams\\Core\\Support\\Facades\\Streams;\n\n$entry = Streams::repository('contacts')->find('john-doe');\n\nif ($entry->validator()->passes()) {\n    \/\/ Yay!\n}\n```\n\n### Stream Validator\n\nYou may also return a validator instance with your own **data** which can be an entry object or _array_ of data to validate as an entry.\n\n```php\nuse Streams\\Core\\Support\\Facades\\Streams;\n\n$validator = Streams::repository('contacts')->validator([\n    'name' => 'John Doe',\n    'email' => 'john@doe.me',\n    'company' => 'streams',\n]);\n\nif ($entry->validator()->passes()) {\n    \/\/ Yay!\n}\n```\n","href":"\/docs\/core\/validation","package":"Streams Core"},{"id":"views","title":"Views","intro":null,"category":"frontend","enabled":true,"stage":"reviewing","sort":0,"body":"\nViews contain the HTML served by the frontend of your application. You can find and define views in the `resources\/views` directory. A simple view might look something like this:\n\n```blade\n\/\/ resources\/views\/welcome.blade.php\n<html>\n    <body>\n        <h1>@verbatim{{ config('app.name') }}@endverbatim<\/h1>\n    <\/body>\n<\/html>\n```\n\nEach file inside your `resources\/views` directory is a **view** and is available for use however you like.\n\n## Layouts\n\nLayouts are the outer structural foundation of your application's HTML. It is considered best practice to leverage layouts via [view inheritance](https:\/\/laravel.com\/docs\/blade#template-inheritance) to abstract your view presentation.\n\n```blade\n\/\/ resources\/views\/layouts\/default.blade.php\n@verbatim<html>\n    <head>\n        <title>App Name - @yield('title')<\/title>\n    <\/head>\n    <body>\n        @section('sidebar')\n            This is the default sidebar.\n        @show\n\n        <div class=\"container\">\n            @yield('content')\n        <\/div>\n    <\/body>\n<\/html>@endverbatim\n```\n\n### Extending Layouts\n\nWhen defining a child view, use the Blade `@verbatim@extends@endverbatim` directive to specify which layout the view should \"inherit\". Views that extend a Blade layout may inject content into the layout's sections using `@verbatim@section@endverbatim` directives. Remember, as seen in the example above, these sections' contents will be displayed in the layout using `@verbatim@yield@endverbatim`:\n\n```blade\n\/\/ resources\/views\/example.blade.php\n@verbatim@extends('layouts.default')\n\n@section('title', 'Example Title')\n\n@section('sidebar')\n    @parent\n\n    <p>This is appended to the default sidebar.<\/p>\n@endsection\n\n@section('content')\n    <p>This is the content.<\/p>\n@endsection@endverbatim\n```\n\n## Partials\n\nPartials are reusable views intended to be included in many other views and even within other partials. You can use any view as a \"partial\" by using the [include](https:\/\/laravel.com\/docs\/blade#including-subviews) directive.\n\n```blade\n\/\/ Import \/resources\/views\/partials\/assets.blade.php\n@verbatim@include('partials.assets')@endverbatim\n```\n\n## Includes\n\nIncludes are like named slots that can be accessed outside of, and prior to, the view layer.\n\n```php\nuse Streams\\Core\\Support\\Facades\\Includes;\n\nIncludes::include('assets', 'partials.scripts');\n```\n\n```blade\n@verbatim@foreach($includes->get('assets', []) as $include)\n    @include $include\n@endforeach@endverbatim\n```\n\n## Conventions\n\nWe recommend the following conventions as best practice.\n\n### Naming\n\n- Use lowercase filenames.\n- Use hyphens to separate words.\n- Mind plurality - [we can leverage this](routing#automatically-resolved-views).\n\n### Organizing\n\nBelow is an excellent example of organizing utilitarian views like [layouts](#layouts) and [partials](#partials). These views are used for application structure and DRY'ing up views.\n\n```files\nresources\/views\/\n|-- partials\/\n|   |-- head.blade.php\n|   |-- footer.blade.php\n|   |-- navigation.blade.php\n|-- layouts\/\n|   |-- amp.blade.php\n|   |-- default.blade.php\n|   |-- alternate.blade.php\n```\n\n### Stream Views\n\nOrganizing stream views by stream can not only be [automatically detected](routing#automatically-resolved-views) but bring order to large applications. You can even bundle stream specific partials and layouts within the stream directories to separate them from similar type views intended for global use, as shown above.\n\n```files\nresources\/views\/\n|-- contacts\/\n|   |-- index.blade.php\n|   |-- view.blade.php\n|   |-- vcard.blade.php\n```\n\nThe above views correlate to the below routing example.\n\n```json\n\/\/ streams\/contacts.json\n{\n    \"routes\": {\n        \"index\": \"contacts\",\n        \"view\": \"contacts\/{id}\",\n        \"vcard\": \"contacts\/vcard\/{id}\"\n    }\n}\n```\n","href":"\/docs\/core\/views","package":"Streams Core"},{"id":"caching","title":"Caching","category":"basics","intro":null,"sort":31,"stage":"drafting","enabled":true,"body":"\n## API Cache\n\nYou may enable API level caching with the `ApiCache` middleware:\n\n```php\n\/\/ app\/Http\/Kernel.php\n\nprotected $middlewareGroups = [\n    'api' => [\n        ...\n        \\Streams\\Api\\Http\\Middleware\\ApiCache::class,\n    ],\n];\n```\n\n### Cache Control\n\nYou may control the API cache with the following headers:\n\n#### Disable Cache\n\nTo force fresh results use the `no-cache` directive:\n\n```bash\nCache-Control: no-cache\n```\n\n#### Allow Cache\n\nUse the `max-age` directive to allow cached results for a certain amount of seconds:\n\n```bash\nCache-Control: max-age=600\n```\n\n## Application Cache\n\nStreams may be cached by default at the application level according to their [configuration](..\/core\/caching).\n### Configuration\n\nApplication-level streams cache can be specified in the stream configuration:\n\n```json\n\/\/streams\/examples.json\n{\n    \"config\": {\n        \"cache\": {\n            \"enabled\": true,\n            \"store\": \"default\",\n            \"ttl\": 3600\n        }\n    }\n}\n```\n\n### Cache Parameter\n\nYou may enable application-level cache using the `cache` parameter:\n\n```json\n\/\/ GET \/api\/streams\/examples\/entries\n{\n    \"parameters\": [\n        {\"cache\": [300]}\n        {\"where\": [\"status\", \"active\"]}\n    ]\n}\n```\n","href":"\/docs\/api\/caching","package":"Streams API"},{"id":"client","title":"Client","category":"basics","stage":"outlining","enabled":true,"sort":99,"body":"\n## Introduction\n\nIn addition to the API server, we also provide a Javascript [API Client](https:\/\/github.com\/laravel-streams\/api-client) to interact with the server. The API Client is consistent in design to its PHP counterpart.\n\n## Installation\n\nYou may use any NPM package manager to install the API Client:\n\n```bash\nyarn add @laravel-streams\/api-client\n```\n\n```bash\nnpm install @laravel-streams\/api-client\n```\n\n\n## Getting Started\n\nTo get started, import `Streams` and instantiate it with the `baseURL` of your Streams API server. The resulting streams object is equivelant to the PHP Streams facade.\n\n```js\nimport { Streams } from \"@laravel-streams\/api-client\";\n\nexport const streams = new Streams({\n    baseURL: \"http:\/\/127.0.0.1:8000\/api\",\n});\n```\n\n### Stream Instances\n\nYou can return stream instances for later use using the `make` method.\n\n```js\nconst stream: Stream = await streams.make(\"contacts\");\n```\n\nStreams can return their respective repositories and entry criteria using corresponding methods.\n\n```js\nconst repository: Repository = stream.getRepository();\nconst query: Criteria = stream.getEntries();\n```\n\n\n### Repositories\n\nYou can return a streams entry repository using the `repository` method.\n\n```js\nconst repository: Repository = await streams.respository(\"contacts\");\n```\n\nThe repository has the same methods available as it's [PHP counterpart](\/docs\/core\/repositories).\n\n```js\nlet entries: Collection = await repository.all();\n\nlet entries: Collection = await repository.findAll([1, 2, 3, 64]);\n\nconst first: Entry = entries.first();\n\nconst entry: Entry = await repository.create({\n    name: \"John Doe\",\n    age: 30,\n});\n\nentry.name = 'John Smith';\n\nawait repository.save(entry);\n\nawait repository.delete(entry);\n```\n\n\n### Queries\n\nYou can return an [entry criteria](\/docs\/core\/querying) using the `entries` method.\n\n```js\nconst query: Criteria = await streams.entries(\"contacts\");\n```\n\nThe entry criteria also has the same methods available as it's [PHP counterpart](\/docs\/core\/querying).\n\n```js\nlet entries: Collection = await query\n    .where('age', '<=', 30)\n    .orderBy('age', 'desc')\n    .get();\n\nlet paginator: Paginator = await query\n    .orderBy('age', 'desc')\n    .paginate(10);\n```\n\n\n## Entries\n\nWorking with entry instances is consistent to their PHP counterparts.\n\n```js\nconst entry: Entry = await repository.first();\n\nentry.name = 'John Smith';\n\nawait entry.save();\n\nawait entry.delete();\n\nconst obj = entry.serialize();\n```\n\n\n## Caching\n\nThe API Client comes with built-in ETag support. To get started, enable the feature on the client.\n\n```js\nimport { Streams } from \"@laravel-streams\/api-client\";\n\nexport const streams = new Streams({\n    baseURL: \"http:\/\/127.0.0.1:8000\/api\",\n    etag: {\n        enabled:true\n    }\n});\n```\n\nYou must also [enable cache](caching#configuration) on the desired stream:\n\n```json\n\/\/ streams\/examples.json\n{\n    \"config\": {\n        \"cache\": {\n            \"enabled\": true,\n            \"ttl\": 300\n        }\n    }\n}\n```\n","href":"\/docs\/api\/client","package":"Streams API"},{"id":"configuration","title":"Configuration","category":"getting_started","intro":"Configuring the API.","sort":2,"enabled":true,"body":"\n## Configuration Files\n\nPublished configuration files reside in `config\/streams\/`.\n\n``` files\n\u251c\u2500\u2500 config\/streams\/\n\u2502   \u2514\u2500\u2500 api.php\n```\n\n### Publishing Configuration\n\nUse the following command to publish configuration files.\n\n```bash\nphp artisan vendor:publish --provider=Streams\\\\Api\\\\ApiServiceProvider --tag=config\n```\n\nThe above command will copy configuration files from their package location to the directory mentioned above so that you can modify them directly and commit them to your version control system.\n\n## Configuring the API\n\nBelow are the contents of the published configuration file:\n\n```php\n\/\/ config\/streams\/api.php\n\nreturn [\n\n    \/*\n     * Determine if the API should be enabled.\n     *\n     * This is disabled by default because\n     * The API is public by default.\n     *\/\n    'enabled' => env('STREAMS_API_ENABLED', true),\n\n    \/*\n     * Specify the API prefix.\n     *\/\n    'prefix' => env('STREAMS_API_PREFIX', 'api'),\n\n    \/*\n     * Specify the API group middleware.\n     *\n     * This is designed to match out of the box\n     * \"app\/Providers\/RouteServiceProvider.php\"\n     * and \"app\/Http\/Kernel.php\" Laravel files.\n     *\n     * Changing this value will require\n     * adjusting the above files.\n     *\/\n    'middleware' => env('STREAMS_API_MIDDLEWARE', 'api'),\n\n];\n```\n\n### API Middleware\n\nAPI middleware an be configured in your application's HTTP kernel.\n\n```php\n\/\/ app\/Http\/Kernel.php\n\nprotected $middlewareGroups = [\n    'api' => [\n        'throttle:60,1',\n        'bindings',\n        Streams\\Api\\Http\\Middleware\\ApiCache::class,\n    ],\n];\n```\n\n### API Routes File\n\nThe `app\/Providers\/RouteServiceProvider.php` file typically uses the `api` middleware group when loading the `routes\/api.php` file. By default this is compatible and routes defined there will be properly prefixed and grouped.\n","href":"\/docs\/api\/configuration","package":"Streams API"},{"id":"endpoints","title":"Endpoints","category":"basics","sort":0,"enabled":true,"body":"\n## Resources\n\nThe API package is a universal RESTful API and has some resources available right out of the box.\n\n### Entries\n\nEntries represent the data within your configured [Streams](streams). Use the Entries API to interact with streams data.\n\n- [Available Methods](\/docs\/api\/entries)\n\n\n### Streams\n\nEntries represent the data within your configured [Streams](#streams). Use the Entries API to interact with streams data.\n\n- [Available Methods](\/docs\/api\/streams)\n\n\n## Custom Endpoints\n\nIn general, routing endpoints for the API is very similar to routing anything else in Laravel.\n\nIf you are using the [ApiCache](caching) middleware you will want to make sure and include the `stream` hint in your routes action.\n\n```php\n\/\/ routes\/api.php\nRoute::streams('examples\/{id}\/do-something', [\n    'stream' => 'examples',\n    'uses' => DoSomething::class\n]);\n```\n\n### Defining API Routes\n\nYou can define API in a number of different \n\n#### API Routes File\n\nThe `app\/Providers\/RouteServiceProvider.php` file typically uses the `api` middleware group when loading the `routes\/api.php` file. By default this is compatible and routes defined there will be properly prefixed and grouped.\n\n#### Using the Router\n\nYou may also route API endpoints using the router directly.\n\n```php\nRoute::prefix('api')\n    ->middleware('api')\n    ->group(function () {\n        \/\/ Define your routes.\n    });\n```\n\nWhen routing API endpoints from a package, the API prefix and middleware group is potentially unknown. You may use the API configuration to determine the correct values:\n\n```php\nRoute::prefix(Config::get('streams.api.prefix', 'api'))\n    ->middleware(Config::get('streams.api.middleware', 'api'))\n    ->group(function () {\n        \/\/ Define your routes.\n    });\n```\n\n### API Responses\n\nYou may use the `ApiResponse` utility to return standardized JSON responses.\n\nResponses will automatically include built-in links and meta and will default to a `200` status code.\n\n```php\n\/\/ app\\Controller\\Api\\DoSomething;\nuse Streams\\Api\\ApiResponse;\n\npublic function __invoke($id)\n{\n    $response = new ApiResponse('examples');\n\n    \/\/ Your endpoint logic...\n\n    return $response->make();\n}\n```\n\n#### Available Methods\n\nBelow is a list of methods you can use to configure the response:\n\n\n```php\n$response->setStatus(int $status): self\n\n$response->addHeader(string $name, mixed $value): self\n$response->removeHeader(string $name): self\n\n$response->addError(array $error): self\n\n$response->addLink(string $name, mixed $value): self\n$response->removeLink(string $name): self\n\n$response->addMeta(string $name, mixed $value): self\n$response->removeMeta(string $name): self\n\n$response->setData(mixed $data): self\n\n$response->make(mixed $data = null, int $status = null, array $headers = []): JsonResponse\n```\n","href":"\/docs\/api\/endpoints","package":"Streams API"},{"id":"entries","title":"Entries","category":"reference","sort":0,"enabled":true,"body":"\n## Introduction\n\nEntries represent the data within your configured [Streams](#streams). Use the Entries API to interact with streams data.\n\n## Get Entries\n\nReturn paginated entries from a configured stream:\n\n`GET` `\/api\/streams\/{stream}\/entries`\n\n#### Request\n\n```bash\ncurl --location --request GET 'http:\/\/127.0.0.1:8000\/api\/streams\/{stream}\/entries'\n```\n\n#### Response\n\n```json\n{\n    \"errors\": [],\n    \"links\": {\n        \"self\": \"http:\/\/127.0.0.1:8000\/api\/streams\/examples\/entries\",\n        \"streams\": \"http:\/\/127.0.0.1:8000\/api\/streams\",\n        \"stream\": \"http:\/\/127.0.0.1:8000\/api\/streams\/examples\",\n        \"entries\": \"http:\/\/127.0.0.1:8000\/api\/streams\/examples\/entries\",\n        \"first_page\": \"http:\/\/127.0.0.1:8000\/api\/streams\/examples\/entries?page=1\",\n        \"next_page\": null,\n        \"previous_page\": null\n    },\n    \"meta\": {\n        \"parameters\": {\n            \"stream\": \"examples\"\n        },\n        \"stream\": \"examples\",\n        \"total\": 2,\n        \"per_page\": 100,\n        \"last_page\": 1,\n        \"current_page\": 1\n    },\n    \"data\": [\n        {\n            \"id\": \"454eddee-5e72-3f40-ae98-99d4bc88410a\",\n            \"user\": \"6bab6d9d-44c8-379f-842b-16b0ebb6fd71\",\n            \"name\": \"Test Example\"\n        },\n        {\n            \"id\": \"a2f2647d-8232-403b-b266-f333c8c3f6cb\",\n            \"user\": \"7e947900-2be1-315b-89b8-c28ae715969f\",\n            \"name\": \"Another Test\"\n        }\n    ]\n}\n```\n\n### Pagination Options\n\nUse the `per_page` and `page` options to control the amount of entries per page and specific page to return.\n\n```bash\ncurl --location --request GET 'http:\/\/127.0.0.1:8000\/api\/streams\/{stream}\/entries?per_page=15&page=5'\n```\n\n### Filtering Results\n\nYou may filter entries by providing a JSON array of [criteria](..\/core\/querying#filtering) parameters.\n\n```bash\ncurl --location --request GET '\/api\/streams\/{stream}\/entries' \\\n    -H 'Content-Type: application\/json' \\\n    -d '{\"parameters\": [{\"where\": [\"name\", \"LIKE\", \"%Example%\"]}]}'\n```\n\n### Sorting Results\n\nYou may specify sorting and ordering within the JSON array of [criteria](..\/core\/querying#sorting-ordering) parameters.\n\n```bash\ncurl --location --request GET '\/api\/streams\/{stream}\/entries' \\\n    -H 'Content-Type: application\/json' \\\n    -d '{\"parameters\": [{\"order_by\": [\"name\", \"asc\"]}]}'\n```\n\n\n## Create Entry\n\nCreate a new entry for a configured stream:\n\n`POST` `\/api\/streams\/{stream}\/entries`\n\n#### Request\n\n```bash\ncurl --location --request POST '\/api\/streams\/{stream}\/entries' \\\n    -H 'Content-Type: application\/json' \\\n    -d '{\"user\": \"7e947900-2be1-315b-89b8-c28ae715969f\", \"name\": \"Example Entry\"}'\n```\n\n#### Response\n\n```json\n{\n    \"errors\": [],\n    \"links\": {\n        \"self\": \"http:\/\/127.0.0.1:8000\/api\/streams\/examples\/entries\",\n        \"streams\": \"http:\/\/127.0.0.1:8000\/api\/streams\",\n        \"stream\": \"http:\/\/127.0.0.1:8000\/api\/streams\/examples\",\n        \"entries\": \"http:\/\/127.0.0.1:8000\/api\/streams\/examples\/entries\",\n        \"location\": \"http:\/\/127.0.0.1:8000\/api\/streams\/examples\/entries\/2b91e2fd-fc16-4f5a-becb-5b74b07ac48d\"\n    },\n    \"meta\": {\n        \"payload\": {\n            \"user\": \"7e947900-2be1-315b-89b8-c28ae715969f\",\n            \"name\": \"Example Entry\"\n        },\n        \"parameters\": {\n            \"stream\": \"examples\"\n        },\n        \"stream\": \"examples\"\n    },\n    \"data\": {\n        \"id\": \"2b91e2fd-fc16-4f5a-becb-5b74b07ac48d\",\n        \"user\": \"7e947900-2be1-315b-89b8-c28ae715969f\",\n        \"name\": \"Example Entry\"\n    }\n}\n```\n\n## Get Entry\n\nReturn a single entry for a configured stream:\n\n`GET` `\/api\/streams\/{stream}\/entries\/{entry}`\n\n#### Request\n\n```bash\ncurl --location --request GET 'http:\/\/127.0.0.1:8000\/api\/streams\/{stream}\/entries\/{entry}'\n```\n\n#### Response\n\n```json\n{\n    \"errors\": [],\n    \"links\": {\n        \"self\": \"http:\/\/127.0.0.1:8000\/api\/streams\/examples\/entries\/2b91e2fd-fc16-4f5a-becb-5b74b07ac48d\",\n        \"streams\": \"http:\/\/127.0.0.1:8000\/api\/streams\",\n        \"stream\": \"http:\/\/127.0.0.1:8000\/api\/streams\/examples\",\n        \"entries\": \"http:\/\/127.0.0.1:8000\/api\/streams\/examples\/entries\",\n        \"user\": \"http:\/\/127.0.0.1:8000\/api\/streams\/users\/entries\/7e947900-2be1-315b-89b8-c28ae715969f\"\n    },\n    \"meta\": {\n        \"parameters\": {\n            \"stream\": \"examples\",\n            \"entry\": \"2b91e2fd-fc16-4f5a-becb-5b74b07ac48d\"\n        },\n        \"stream\": \"examples\"\n    },\n    \"data\": {\n        \"id\": \"2b91e2fd-fc16-4f5a-becb-5b74b07ac48d\",\n        \"user\": \"7e947900-2be1-315b-89b8-c28ae715969f\",\n        \"name\": \"Example Entry\"\n    }\n}\n```\n\n## Patch Entry\n\nUpdate specific values of an entry in a configured stream:\n\n`PATCH` `\/api\/streams\/{stream}\/entries\/{entry}`\n\nIf the entry does not exist the API will attempt to create one with the given values.\n\n#### Request\n\n```bash\ncurl --location --request PATCH '\/api\/streams\/{stream}\/entries\/{entry}' \\\n    -H 'Content-Type: application\/json' \\\n    -d '{\"name\": \"Updated Entry\"}'\n```\n\n#### Response\n\n```json\n{\n    \"errors\": [],\n    \"links\": {\n        \"self\": \"http:\/\/127.0.0.1:8000\/api\/streams\/examples\/entries\/2b91e2fd-fc16-4f5a-becb-5b74b07ac48d\",\n        \"streams\": \"http:\/\/127.0.0.1:8000\/api\/streams\",\n        \"stream\": \"http:\/\/127.0.0.1:8000\/api\/streams\/examples\",\n        \"entries\": \"http:\/\/127.0.0.1:8000\/api\/streams\/examples\/entries\"\n    },\n    \"meta\": {\n        \"payload\": {\n            \"name\": \"Updated Entry\"\n        },\n        \"parameters\": {\n            \"stream\": \"examples\",\n            \"entry\": \"2b91e2fd-fc16-4f5a-becb-5b74b07ac48d\"\n        },\n        \"stream\": \"examples\"\n    },\n    \"data\": {\n        \"id\": \"2b91e2fd-fc16-4f5a-becb-5b74b07ac48d\",\n        \"user\": \"7e947900-2be1-315b-89b8-c28ae715969f\",\n        \"name\": \"Updated Entry\"\n    }\n}\n```\n\n## Update Entry\n\nReplace values of an entry in a configured stream:\n\n`PUT` `\/api\/streams\/{stream}\/entries\/{entry}`\n\nIf the entry does not exist the API will attempt to create one with the given values.\n\n#### Request\n\n```bash\ncurl --location --request PUT '\/api\/streams\/{stream}\/entries\/{entry}' \\\n    -H 'Content-Type: application\/json' \\\n    -d '{\"name\": \"Updated Entry\"}'\n```\n\n#### Response\n\n```json\n{\n    \"errors\": [],\n    \"links\": {\n        \"self\": \"http:\/\/127.0.0.1:8000\/api\/streams\/examples\/entries\/2b91e2fd-fc16-4f5a-becb-5b74b07ac48d\",\n        \"streams\": \"http:\/\/127.0.0.1:8000\/api\/streams\",\n        \"stream\": \"http:\/\/127.0.0.1:8000\/api\/streams\/examples\",\n        \"entries\": \"http:\/\/127.0.0.1:8000\/api\/streams\/examples\/entries\"\n    },\n    \"meta\": {\n        \"payload\": {\n            \"name\": \"Updated Entry\"\n        },\n        \"parameters\": {\n            \"stream\": \"examples\",\n            \"entry\": \"2b91e2fd-fc16-4f5a-becb-5b74b07ac48d\"\n        },\n        \"stream\": \"examples\"\n    },\n    \"data\": {\n        \"id\": \"2b91e2fd-fc16-4f5a-becb-5b74b07ac48d\",\n        \"user\": null,\n        \"name\": \"Updated Entry\"\n    }\n}\n```\n\n## Delete Entry\n\nDeletes an entry from a configured stream. Successful delete requests return an empty 204 response.\n\n`DELETE` `\/api\/streams\/{stream}\/entries\/{entry}`\n\n#### Request\n\n```bash\ncurl --location --request DELETE '\/api\/streams\/{stream}\/entries' \\\n    -H 'Content-Type: application\/json' \\\n    -d '{\"name\": \"Updated Entry\"}'\n```\n","href":"\/docs\/api\/entries","package":"Streams API"},{"id":"installation","title":"Installation","category":"getting_started","intro":null,"enabled":true,"body":"\n## Downloading\n\nThis package is added to existing Laravel projects as a dependency by requiring it with Composer.\n\n```bash\ncomposer require streams\/api:1.0.x-dev\n```\n\nThe Streams API comes pre-configured with the [Streams starter application](\/docs\/installation) and some of the [examples](\/docs\/examples).\n\n### Cloning with Git\n\n```bash\ngit clone git@github.com:laravel-streams\/streams-api.git\n```\n\n## Updating\n\nFrom within your project, use Composer to update this individual package:\n\n```bash\ncomposer update streams\/api --with-dependencies\n```\n\nYou can also update your entire project using `composer update`.\n","href":"\/docs\/api\/installation","package":"Streams API"},{"id":"introduction","title":"Streams API","link_title":"Introduction","intro":"A robust API for interacting with streams and entry data.","enabled":true,"body":"\n## Introduction\n\nThe Streams API provides a full featured and extensible RESTful API. The API provides access and management control to all configured domain information and a streamlined interface to define custom endpoints of your own.\n\nThis package can serve as the primary API, supplement an exisinting API, or add an additional API to a project. \n\n### [Installation](installation)\n\n```bash\ncomposer require streams\/api:1.0.x-dev\n```\n\n### [Configuration](configuration)\n\n```bash\nphp artisan vendor:publish --provider=Streams\\\\Api\\\\ApiServiceProvider --tag=config\n```\n","href":"\/docs\/api\/introduction","package":"Streams API"},{"id":"streams","title":"Streams","category":"reference","sort":0,"enabled":true,"body":"\n## Introduction\n\nStreams represent the data structures within your application. Use the Streams API to manage data structures.\n\nIf you want to access the data within a configured stream, use the [Entries API](entries).\n\n## Get Stream\n\nReturn a paginated list of configured streams:\n\n`GET` `\/api\/streams`\n\n#### Request\n\n```bash\ncurl --location --request GET 'http:\/\/127.0.0.1:8000\/api\/streams'\n```\n\n#### Response\n\n```json\n{\n    \"errors\": [],\n    \"links\": {\n        ...\n    },\n    \"meta\": {\n        \"total\": 2,\n        \"per_page\": 100,\n        \"last_page\": 1,\n        \"current_page\": 1\n    },\n    \"data\": [\n        ...\n    ]\n}\n```\n\n### Pagination Options\n\nUse the `per_page` and `page` options to control the amount of streams per page and specific page to return.\n\n```bash\ncurl --location --request GET 'http:\/\/127.0.0.1:8000\/api\/streams?per_page=15&page=5'\n```\n\n### Filtering Results\n\nYou may filter streams by providing a JSON array of [criteria](..\/core\/querying#filtering) parameters.\n\n```bash\ncurl --location --request GET '\/api\/streams' \\\n    -H 'Content-Type: application\/json' \\\n    -d '{\"parameters\": [{\"where\": [\"name\", \"LIKE\", \"%Docs%\"]}]}'\n```\n\n### Sorting Results\n\nYou may specify sorting and ordering within the JSON array of [criteria](..\/core\/querying#sorting-ordering) parameters.\n\n```bash\ncurl --location --request GET '\/api\/streams' \\\n    -H 'Content-Type: application\/json' \\\n    -d '{\"parameters\": [{\"order_by\": [\"name\", \"asc\"]}]}'\n```\n\n\n## Create Stream\n\nCreate a new stream:\n\n`POST` `\/api\/streams`\n\n#### Request\n\n```bash\ncurl --location --request POST '\/api\/streams\/{stream}' \\\n    -H 'Content-Type: application\/json' \\\n    -d '{\"id\": \"examples\", \"name\": \"Examples\"}'\n```\n\n#### Response\n\n```json\n{\n    \"errors\": [],\n    \"links\": {\n        \"self\": \"http:\/\/127.0.0.1:8000\/api\/streams\",\n        \"streams\": \"http:\/\/127.0.0.1:8000\/api\/streams\",\n        \"entries\": \"http:\/\/127.0.0.1:8000\/api\/streams\/examples\/entries\",\n        \"location\": \"http:\/\/127.0.0.1:8000\/api\/streams\/examples\"\n    },\n    \"meta\": {\n        \"payload\": {\n            \"id\": \"examples\",\n            \"name\": \"Examples\"\n        },\n        \"stream\": \"core.streams\"\n    },\n    \"data\": {\n        \"id\": \"examples\",\n        \"name\": \"Examples\"\n    }\n}\n```\n\n## Get Stream\n\nReturn a single stream:\n\n`GET` `\/api\/streams\/{stream}`\n\n#### Request\n\n```bash\ncurl --location --request GET 'http:\/\/127.0.0.1:8000\/api\/streams\/{stream}'\n```\n\n#### Response\n\n```json\n{\n    \"errors\": [],\n    \"links\": {\n        \"self\": \"http:\/\/127.0.0.1:8000\/api\/streams\/examples\",\n        \"streams\": \"http:\/\/127.0.0.1:8000\/api\/streams\",\n        \"stream\": \"http:\/\/127.0.0.1:8000\/api\/streams\/examples\",\n        \"entries\": \"http:\/\/127.0.0.1:8000\/api\/streams\/examples\/entries\"\n    },\n    \"meta\": {\n        \"parameters\": {\n            \"stream\": \"examples\"\n        },\n        \"stream\": \"core.streams\"\n    },\n    \"data\": {\n        \"id\": \"examples\",\n        \"name\": \"Examples\"\n    }\n}\n```\n\n## Patch Stream\n\nUpdate specific values of a stream:\n\n`PATCH` `\/api\/streams\/{stream}`\n\nIf the stream does not exist the API will attempt to create one with the given values.\n\n#### Request\n\n```bash\ncurl --location --request PATCH '\/api\/streams\/{stream}' \\\n    -H 'Content-Type: application\/json' \\\n    -d '{\"description\": \"Example stream data.\"}'\n```\n\n#### Response\n\n```json\n{\n    \"errors\": [],\n    \"links\": {\n        \"self\": \"http:\/\/127.0.0.1:8000\/api\/streams\/examples\",\n        \"streams\": \"http:\/\/127.0.0.1:8000\/api\/streams\",\n        \"stream\": \"http:\/\/127.0.0.1:8000\/api\/streams\/examples\",\n        \"entries\": \"http:\/\/127.0.0.1:8000\/api\/streams\/examples\/entries\"\n    },\n    \"meta\": {\n        \"payload\": {\n            \"description\": \"Example stream data.\"\n        },\n        \"parameters\": {\n            \"stream\": \"examples\"\n        },\n        \"stream\": \"core.streams\"\n    },\n    \"data\": {\n        \"id\": \"examples\",\n        \"name\": \"Updated Name\",\n        \"description\": \"Example stream data.\"\n    }\n}\n```\n\n## Update Stream\n\nReplace values of a streams:\n\n`PUT` `\/api\/streams\/{stream}`\n\nIf the stream does not exist the API will attempt to create one with the given values.\n\n#### Request\n\n```bash\ncurl --location --request PUT '\/api\/streams\/{stream}' \\\n    -H 'Content-Type: application\/json' \\\n    -d '{\"description\": \"Example stream data.\"}'\n```\n\n#### Response\n\n```json\n{\n    \"errors\": [],\n    \"links\": {\n        \"self\": \"http:\/\/127.0.0.1:8000\/api\/streams\/examples\",\n        \"streams\": \"http:\/\/127.0.0.1:8000\/api\/streams\",\n        \"stream\": \"http:\/\/127.0.0.1:8000\/api\/streams\/examples\",\n        \"entries\": \"http:\/\/127.0.0.1:8000\/api\/streams\/examples\/entries\"\n    },\n    \"meta\": {\n        \"payload\": {\n            \"description\": \"Example stream data.\"\n        },\n        \"parameters\": {\n            \"stream\": \"examples\"\n        },\n        \"stream\": \"core.streams\"\n    },\n    \"data\": {\n        \"description\": \"Example stream data.\",\n        \"id\": \"examples\"\n    }\n}\n```\n\n## Delete Stream\n\nDeletes a stream. Successful delete requests return an empty 204 response.\n\n`DELETE` `\/api\/streams\/{stream}`\n\n#### Request\n\n```bash\ncurl --location --request DELETE '\/api\/streams\/{stream}' \\\n    -H 'Content-Type: application\/json' \\\n    -d '{\"name\": \"Updated Entry\"}'\n```\n","href":"\/docs\/api\/streams","package":"Streams API"},{"id":"avatars","title":"Avatars","category":"components","enabled":true,"stage":"outlining","body":"\n1. [ ] **What** are dropdowns?\n2. [ ] How do you **use** dropdowns?\n3. [ ] How do you **build** dropdowns?\n4. [ ] How do you **secure** dropdowns?\n5. [ ] How do you **extend** dropdowns?\n\n\n- **Intro:** Introduce the idea in one sentence.\n- **Explanation:** An elevator pitch that signals the reader to continue or not (keep looking for relevant page).\n- **Sections\/Features:** Separate sections\/sub-sections (h2s\/h3s) consistently. This will build the ToC.\n- **Next Steps:** Next actions to take that are intentional versus simply additional reading.\n- **Code Examples:** Code examples and snippets.\n- **Insights:** Tips, post scriptum, creative links.\n- **Additional Reading:** Link to related ideas\/topics\/guides\/recipes.\n","href":"\/docs\/ui\/avatars","package":"Streams UI"},{"id":"buttons","title":"Buttons","category":"components","enabled":true,"stage":"outlining","body":"\n1. [ ] **What** are buttons?\n2. [ ] How do you **use** buttons?\n3. [ ] How do you **build** buttons?\n4. [ ] How do you **secure** buttons?\n5. [ ] How do you **extend** buttons?\n\n- **Intro:** Introduce the idea in one sentence.\n- **Explanation:** An elevator pitch that signals the reader to continue or not (keep looking for relevant page).\n- **Sections\/Features:** Separate sections\/sub-sections (h2s\/h3s) consistently. This will build the ToC.\n    - Attributes\n- **Next Steps:** Next actions to take that are intentional versus simply additional reading.\n- **Code Examples:** Code examples and snippets.\n- **Insights:** Tips, post scriptum, creative links.\n- **Additional Reading:** Link to related ideas\/topics\/guides\/recipes.\n\n\n## Introduction\n\nButtons allow users to take actions and make choices.They are typically placed throughout your UI, in places like:\n\n- Forms\n- Cards\n- Modals\n- Tables\n- Toolbars\n\n## Basic Usage\n\n```blade\n@verbatim<x-button>View Dashboard<\/x-button>@endverbatim\n```\n\n### Icons\n\n- [Icons](icons)\n","href":"\/docs\/ui\/buttons","package":"Streams UI"},{"id":"components","title":"Components","category":"basics","sort":0,"enabled":true,"stage":"outlining","body":"\n\n1. [ ] **What** is it?\n1. [ ] How do you **use** it?\n2. [ ] How do you **build** it?\n3. [ ] How do you **extend** it?\n\n- **Intro:** Introduce the idea in one sentence.\n- **Explanation:** An elevator pitch that signals the reader to continue or not (keep looking for relevant page).\n- **Sections\/Features:** Separate sections\/sub-sections (h2s\/h3s) consistently. This will build the ToC.\n- **Next Steps:** Next actions to take that are intentional versus simply additional reading.\n- **Code Examples:** Code examples and snippets.\n- **Insights:** Tips, post scriptum, creative links.\n- **Additional Reading:** Link to related ideas\/topics\/guides\/recipes.\n\n\n\n## Introduction\n\nUI Components are the foundation of the Streams UI system. They encapsulate the structural properties, rendering, and logical behavior of UI such as forms, tables, and buttons.\n\n### Available Components\n\nBelow is a complete list of all first-party UI components:\n\n@foreach (Streams::entries('docs_ui')->where('category', 'components')->orderBy('sort', 'ASC')->orderBy('name', 'ASC')->get() as $entry)\n - <a href=\"{{ $entry->id }}\">{{ $entry->title }} ({{ $entry->decorate('stage') }})<\/a>\n@endforeach\n\n\n## Defining UI\n\nThere are a handful of ways to define UI components.\n### Streams Components\n\nStream components are configured within the [stream definition](\/docs\/core\/streams).\n\n```json\n\/\/ streams\/contacts.json\n{\n    \/\/ ...\n    \"ui\": {\n        \"tables\": {\n            \"example\": {\n                \/\/ ...\n            }\n        },\n        \"forms\": {\n            \"example\": {\n                \/\/ ...\n            }\n        }\n    }\n}\n```\n\nYou can use the `ui` method to build the above configured UI component:\n\n```php\n$table = Streams::make('contacts')->ui('tables.example');\n$form = Streams::make('contacts')->ui('forms.example');\n```\n\n### Generic Components\n\nYou can also instantiate UI components manually. In the below example, the provided `stream` parameter would be all that is required. The rest, you may customize to your liking.\n\n> You may find that a component may require more fields if a `stream` parameter is not provided.\n\nIt is also important to note that components technically do not require a `stream` parameter.\n\n```php\nuse Streams\\Ui\\Table\\Table;\n\n$table = new Table([\n    'stream' => $stream,\n    'columns' => [\n        \/\/ ...\n    ],\n]);\n```\n\n\n## Basic Usage\n\n### Blade Components\n\nUI components are paired with corresponding [Laravel Blade components](https:\/\/laravel.com\/docs\/blade#components) which you may access manually in a similar manner.\n\n```blade\n@verbatim<x-table stream=\"contacts\"\/>@endverbatim\n```\n\nEach component documents its own configuration documentation.\n\n### User Interface API\n\nYou can use the control panel API to access any configured UI component for a stream.\n\n```php\nGET|POST  \/cp\/ui\/{stream}\/{component}\/{handle?}\n```\n","href":"\/docs\/ui\/components","package":"Streams UI"},{"id":"configuration","title":"Configuration","category":"getting_started","intro":"Configuring the UI.","sort":2,"enabled":true,"body":"\n## Configuration Files\n\nPublished configuration files reside in `config\/streams\/`.\n\n``` files\n\u251c\u2500\u2500 config\/streams\/\n\u2502   \u2514\u2500\u2500 ui.php\n```\n\n### Publishing Configuration\n\nUse the following command to publish configuration files.\n\n```bash\nphp artisan vendor:publish --provider=Streams\\\\Ui\\\\UiServiceProvider --tag=config\n```\n\nThe above command will copy configuration files from their package location to the directory mentioned above so that you can modify them directly and commit them to your version control system.\n\n### Publishing Streams\n\nUse the following command if you would like to publish and modify stream definitions used by this package.\n\n```bash\nphp artisan vendor:publish --provider=Streams\\\\Ui\\\\UiServiceProvider --tag=streams\n```\n\nThe above command will copy stream definition files from their package location to the `streams` directory so that you can modify them and commit them to your version control system.\n\n## Configuring the UI\n\nBelow are the contents of the published configuration file:\n\n```php\n\/\/ config\/streams\/ui.php\n\nreturn [\n\n    \/**\n     * Specify whether the CP is enabled or not.\n     *\/\n    'cp_enabled' => env('STREAMS_CP_ENABLED', true),\n\n    \/**\n     * This is the URI  prefix\n     * for the control panel.\n     *\/\n    'cp_prefix' => env('STREAMS_CP_PREFIX', 'cp'),\n\n    \/**\n     * The active theme.\n     *\/\n    'cp_theme' => env('STREAMS_CP_THEME', 'default'),\n\n    \/*\n     * Specify the CP fallback policy.\n     * \n     * This policy will be ran if no stream, route,\n     * or component policy is otherwise specified.\n     *\/\n    'cp_policy' => env('STREAMS_CP_POLICY'),\n\n    \/*\n     * Specify the CP group middleware.\n     *\/\n    'cp_middleware' => ['web', 'cp'],\n\n    \/**\n     * Specify input types.\n     *\/\n    'input_types' => [\n        'text' => \\Streams\\Ui\\Input\\Input::class,\n        'hash' => \\Streams\\Ui\\Input\\Input::class,\n        'input' => \\Streams\\Ui\\Input\\Input::class,\n        'string' => \\Streams\\Ui\\Input\\Input::class,\n\n        'date' => \\Streams\\Ui\\Input\\Date::class,\n        'time' => \\Streams\\Ui\\Input\\Time::class,\n        'datetime' => \\Streams\\Ui\\Input\\Datetime::class,\n\n        'slug' => \\Streams\\Ui\\Input\\Slug::class,\n\n        'color' => \\Streams\\Ui\\Input\\Color::class,\n        'radio' => \\Streams\\Ui\\Input\\Radio::class,\n        'range' => \\Streams\\Ui\\Input\\Range::class,\n\n        'select' => \\Streams\\Ui\\Input\\Select::class,\n        'checkboxes' => \\Streams\\Ui\\Input\\Checkboxes::class,\n        'multiselect' => \\Streams\\Ui\\Input\\Multiselect::class,\n\n        'integer' => \\Streams\\Ui\\Input\\Integer::class,\n        'decimal' => \\Streams\\Ui\\Input\\Decimal::class,\n\n        'textarea' => \\Streams\\Ui\\Input\\Textarea::class,\n        'markdown' => \\Streams\\Ui\\Input\\Markdown::class,\n\n        'file' => \\Streams\\Ui\\Input\\File::class,\n        'image' => \\Streams\\Ui\\Input\\Image::class,\n\n        'relationship' => \\Streams\\Ui\\Input\\Relationship::class,\n\n        'toggle' => \\Streams\\Ui\\Input\\Toggle::class,\n        'boolean' => \\Streams\\Ui\\Input\\Checkbox::class,\n    ],\n];\n```\n\n### Service Provider Support\n\n[Streams Providers](\/docs\/core\/providers) can easily register UI configuration using the `registerStreamsUi` method.\n\n```php\nnamespace App\\Providers;\n\nuse Streams\\Core\\Support\\Provider;\nuse App\\Streams\\Ui\\Input\\PeopleInput;\nuse App\\Streams\\Ui\\Widget\\Widget;\n\nclass StreamsServiceProvider extends Provider\n{\n\n    \/**\n     * Register the provider.\n     *\/\n    public function register()\n    {\n        $this->registerStreamsUi([\n            'inputs' => [\n                'people' => PeopleInput::class,\n            ],\n            'components' => [\n                 'widget' => Widget::class,\n            ],\n        ]);\n    }\n}\n```\n\n### Control Panel Middleware\n\nControl panel middleware an be configured in your application's HTTP kernel. By default, the **web** middleware group is passed through as well.\n\n```php\n\/\/ app\/Http\/Kernel.php\n\nprotected $middlewareGroups = [\n    'cp' => [\n        AuthenticateCp::class,\n    ],\n];\n```\n\n### Routes File\n\nYou can use the the `routes\/cp.php` file to define additional routes for the control panel. Routes defined there will be automatically prefixed and grouped.\n","href":"\/docs\/ui\/configuration","package":"Streams UI"},{"id":"cp","title":"Control Panel","link_title":"Getting Started","category":"control_panel","sort":10,"enabled":true,"stage":"outlining","body":"\n\r\n## Introduction\r\n\r\nThe control panel is data driven and \r\n\r\nA sensible and generic control panel UI theme is available by default.\r\n\r\n### Routing\r\n\r\nYou can use the the `routes\/cp.php` file to define additional routes for the control panel. Routes defined there will be automatically prefixed and grouped.\r\n\r\nAdditionally, you can use the Route facade and **cp** method to define control panel routes.\r\n\r\n```bash\r\nRoute::cp('custom\/example\/{entry}', 'Your\\Controller@method');\r\n```\r\n\r\n- [Streams Core Routing](\/docs\/core\/routing)\r\n\r\n### Configuration\r\n\r\nBefore continueing please [enable the control panel](configuration#configuring-the-ui).\r\n\r\n## Components\r\n\r\nMultiple stream-enhanced components are used to assemble the control panel.\r\n\r\n### Navigation\r\n\r\nNavigation sections define the basic functional structure of your control panel.\r\n\r\n#### Defining Navigation\r\n\r\n```json\r\n\/\/ streams\/cp\/navigation\/users.json\r\n{\r\n    \"title\": \"Users\",\r\n    \"buttons\": {\r\n        \"create\": {}\r\n    }\r\n}\r\n```\r\n\r\n#### Stream Navigation\r\n\r\nNavigation sections for streams can also be defined directly within the stream.\r\n\r\n```json\r\n\/\/ streams\/users.json\r\n{\r\n    \"ui\": {\r\n        \"cp\": {\r\n            \"section\": {\r\n                \"title\": \"Users\",\r\n                \"buttons\": {\r\n                    \"create\": {}\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n#### Available Properties\r\n\r\nName | Type | Default | Description\r\n--|---|---|--\r\n`text` | [string](\/docs\/core\/fields\/string) | `null` |  The link text.\r\n`dropdown` | [object](#dropdowns) | `null` |  [Dropdown](dropdowns) items.\r\n\r\n\r\n### Shortcuts\r\n\r\nShortcuts define globally displayed, highly configurable, actionable items.\r\n\r\n\r\n#### Basic Example\r\n#### Dropdowns\r\n\r\n```json\r\n\/\/ streams\/cp\/shortcuts\/profile.json\r\n{\r\n    \"sort_order\": 99,\r\n    \"image\": \"\/user\/avatar\",\r\n    \"dropdown\": {\r\n        \"profile\": {\r\n            \"text\": \"Visit Website\",\r\n            \"attributes.href\": \"\/\",\r\n            \"target\": \"_blank\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n\r\n### Layouts\r\n\r\nLayouts define how to render the main content area of the control panel.\r\n\r\n\r\n### Themes\r\n\r\nThemes define globally accessible variables for the UI. Themes are defined by the `cp.themes` stream:\r\n\r\n\r\n## Extending\r\n\r\nBy [publishing](configuration#publish-streams) the Streams UI package streams you can customize anything you need.\r\n","href":"\/docs\/ui\/cp","package":"Streams UI"},{"id":"dropdowns","title":"Dropdowns","category":"components","enabled":true,"stage":"outlining","body":"\n1. [ ] **What** are dropdowns?\n2. [ ] How do you **use** dropdowns?\n3. [ ] How do you **build** dropdowns?\n4. [ ] How do you **secure** dropdowns?\n5. [ ] How do you **extend** dropdowns?\n\n\n- **Intro:** Introduce the idea in one sentence.\n- **Explanation:** An elevator pitch that signals the reader to continue or not (keep looking for relevant page).\n- **Sections\/Features:** Separate sections\/sub-sections (h2s\/h3s) consistently. This will build the ToC.\n- **Next Steps:** Next actions to take that are intentional versus simply additional reading.\n- **Code Examples:** Code examples and snippets.\n- **Insights:** Tips, post scriptum, creative links.\n- **Additional Reading:** Link to related ideas\/topics\/guides\/recipes.\n\n\n## Introduction\n\nDropdowns are a sub-component that can be used to display dropdown content.\n\n```json\n{\n    \/\/ ...\n    \"dropdown\": {\n        \"home\": {\n            \"text\": \"View Front\",\n            \"attributes.href\": \"\/\",\n            \"attributes.target\": \"_blank\"\n        },\n        \"logout\": {\n            \"text\": \"Logout\",\n            \"attributes.href\": \"\/logout\"\n        }\n    }\n}\n```\n\n- **Intro:** Introduce the idea in one sentence.\n- **Explanation:** An elevator pitch that signals the reader to continue or not (keep looking for relevant page).\n- **Sections\/Features:** Separate sections\/sub-sections (h2s\/h3s) consistently. This will build the ToC.\n    - Attributes\n- **Next Steps:** Next actions to take that are intentional versus simply additional reading.\n- **Code Examples:** Code examples and snippets.\n- **Insights:** Tips, post scriptum, creative links.\n- **Additional Reading:** Link to related ideas\/topics\/guides\/recipes.\n","href":"\/docs\/ui\/dropdowns","package":"Streams UI"},{"id":"forms","title":"Forms","category":"components","enabled":true,"stage":"outlining","body":"\n\r\n1. [ ] **What** are forms?\r\n2. [ ] How do you **use** forms?\r\n3. [ ] How do you **build** forms?\r\n4. [ ] How do you **secure** forms?\r\n5. [ ] How do you **extend** forms?\r\n\r\n\r\n- **Intro:** Introduce the idea in one sentence.\r\n- **Explanation:** An elevator pitch that signals the reader to continue or not (keep looking for relevant page).\r\n- **Sections\/Features:** Separate sections\/sub-sections (h2s\/h3s) consistently. This will build the ToC.\r\n- **Next Steps:** Next actions to take that are intentional versus simply additional reading.\r\n- **Code Examples:** Code examples and snippets.\r\n- **Insights:** Tips, post scriptum, creative links.\r\n- **Additional Reading:** Link to related ideas\/topics\/guides\/recipes.\r\n\r\n\r\n\r\n## Introduction\r\n\r\nForm builders help you quickly build up form components.\r\n\r\n## Defining Forms\r\n\r\n### Form Builders\r\n\r\nYou can instantiate a `FormBuilder` instance and interact with it directly.\r\n\r\n```php\r\nuse Steams\\Ui\\Form\\FormBuilder;\r\n\r\n$builder = new FormBuilder($parameters = []);\r\n```\r\n\r\n### Stream Forms\r\n\r\nDefining forms in your [stream configuration](..\/core\/streams#defining-streams) makes it easy to display, validate, and customize forms based your domain information and entities.\r\n\r\nDefine stream forms using a `handle => parameters` format, where `handle` will be used to reference the form later and  `parameters` is an array of [parameters](#parameters) and [components](#components) configuration.\r\n\r\n```json\r\n\/\/ streams\/example.json\r\n{\r\n    \"ui\": {\r\n        \"forms\": {\r\n            \"default\": {\r\n                \"options.redirect\": \"thank-you\"\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n\r\n## Parameters\r\n\r\nThe following parameters are available though may not be required.\r\n\r\n### Stream\r\n\r\nUse the `stream` parameter to specify the stream to use for entry data. If the form was defined on a stream this is optional.\r\n\r\n```php\r\nuse Steams\\Ui\\Form\\FormBuilder;\r\n\r\n$builder = new FormBuilder([\r\n    'stream' => 'contacts',\r\n]);\r\n```\r\n\r\n### Entry\r\n\r\nUse the `entry` parameter to specify the entry `id` or instance to use for the form. If none is specified, default behavior will create a new entry upon submission.\r\n\r\n```php\r\nuse Steams\\Ui\\Form\\FormBuilder;\r\n\r\n$builder = new FormBuilder([\r\n    'stream' => 'contacts',\r\n    'entry' => Request::get('id'),\r\n]);\r\n```\r\n\r\n### Builder\r\n\r\nUse the `builder` parameter to override the builder instance used to build the form component.\r\n\r\n```json\r\n\/\/ streams\/example.json\r\n{\r\n    \"ui\": {\r\n        \"forms\": {\r\n            \"default\": {\r\n                \"builder\": \"App\\\\MyFormRepository\"\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n### Repository\r\n\r\nUse the `repository` parameter to override the repository instance used to fetch the entry. This parameter defaults to the stream configured repository if any.\r\n\r\n```json\r\n\/\/ streams\/example.json\r\n{\r\n    \"ui\": {\r\n        \"forms\": {\r\n            \"default\": {\r\n                \"repository\": \"App\\\\MyFormRepository\"\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n### Options\r\n\r\nOptions listed here:\r\n\r\n## Components\r\n\r\nForm configurations can also be @imports for more congiguration\r\n\r\n```json\r\n{\r\n    \"ui\": {\r\n        \"form\": {}\r\n    }\r\n}\r\n```\r\n\r\nFull configuration:\r\n\r\n```json\r\n{\r\n    \"ui\": {\r\n        \"forms\": {\r\n            \"default\": {},\r\n            \"{handle}\": {}\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n```php\r\n$form = (new FormBuilder([\r\n    'stream' => 'examples',\r\n    'inputs' => [\r\n        'field_slug' => 'input_type',\r\n    ],\r\n]))->build();\r\n```\r\n\r\nConfiguration Examples\r\n\r\n```json\r\n{\r\n    \"form\": [\r\n        \/\/ Required Configuration\r\n        \"stream\",   \/\/ The stream the entry belongs to\r\n        \"entry\",    \/\/ The entry to edit or null to create\r\n        \r\n        \/\/ Optional Configuration\r\n        \"repository\",   \/\/ The entry repository\r\n\r\n        \"builder\",  \/\/ The form builder to use\r\n        \"form\",     \/\/ The form component to use\r\n        \r\n        \"assets\",   \/\/ Assets to load\r\n        \r\n        \"fields\",   \/\/ Form fields configuration\r\n        \"rules\",    \/\/ Form rules configuration\r\n        \"actions\",  \/\/ Form actions configuration\r\n        \"buttons\",  \/\/ Form buttons configuration\r\n        \"sections\", \/\/ Form sections configuration\r\n        \r\n        \"options\": [      \/\/ Component options array\r\n            \"\"\r\n        ]\r\n    ],\r\n}\r\n```\r\n\r\n### Fields\r\n### Rules\r\n### Actions\r\n### Buttons\r\n### Sections\r\n","href":"\/docs\/ui\/forms","package":"Streams UI"},{"id":"frontend","title":"Frontend","category":"basics","sort":2,"stage":"outlining","enabled":true,"body":"\n1. [ ] **What** are it?\n2. [ ] How do you **use** it?\n3. [ ] How do you **build** it?\n4. [ ] How do you **extend** it?\n\n- **Intro:** Introduce the idea in one sentence.\n- **Explanation:** An elevator pitch that signals the reader to continue or not (keep looking for relevant page).\n- **Sections\/Features:** Separate sections\/sub-sections (h2s\/h3s) consistently. This will build the ToC.\n- **Next Steps:** Next actions to take that are intentional versus simply additional reading.\n- **Code Examples:** Code examples and snippets.\n- **Insights:** Tips, post scriptum, creative links.\n- **Additional Reading:** Link to related ideas\/topics\/guides\/recipes.\n\n## Introduction\n\nStreams UI comes with a small native JavaScript utility to create dynamic interaction with UI components easy.\n\n## Basic Usage\n\n### Include Assets\n\n```blade\n{!! Assets::tag('\/vendor\/streams\/ui\/js\/index.js') !!}\n```\n\n> Make sure to publish assets during [installation](installation).\n\n### Registering Components\n\n### Rendering Components\n\n## Actions\n## Events\n","href":"\/docs\/ui\/frontend","package":"Streams UI"},{"id":"icons","title":"Icons","category":"components","enabled":true,"stage":"outlining","body":"\n1. [ ] **What** are buttons?\n2. [ ] How do you **use** buttons?\n3. [ ] How do you **build** buttons?\n4. [ ] How do you **secure** buttons?\n5. [ ] How do you **extend** buttons?\n\n- **Intro:** Introduce the idea in one sentence.\n- **Explanation:** An elevator pitch that signals the reader to continue or not (keep looking for relevant page).\n- **Sections\/Features:** Separate sections\/sub-sections (h2s\/h3s) consistently. This will build the ToC.\n    - Attributes\n- **Next Steps:** Next actions to take that are intentional versus simply additional reading.\n- **Code Examples:** Code examples and snippets.\n- **Insights:** Tips, post scriptum, creative links.\n- **Additional Reading:** Link to related ideas\/topics\/guides\/recipes.\n\n\n## Introduction\n\nGuidance and suggestions for using icons with Streams UI.|\n","href":"\/docs\/ui\/icons","package":"Streams UI"},{"id":"inputs","title":"Inputs","category":"components","enabled":true,"stage":"outlining","body":"\n- **Intro:** Introduce the idea in one sentence.\n- **Explanation:** An elevator pitch that signals the reader to continue or not (keep looking for relevant page).\n- **Sections\/Features:** Separate sections\/sub-sections (h2s\/h3s) consistently. This will build the ToC.\n- **Next Steps:** Next actions to take that are intentional versus simply additional reading.\n- **Code Examples:** Code examples and snippets.\n- **Insights:** Tips, post scriptum, creative links.\n- **Additional Reading:** Link to related ideas\/topics\/guides\/recipes.\n","href":"\/docs\/ui\/inputs","package":"Streams UI"},{"id":"installation","title":"Installation","category":"getting_started","intro":null,"enabled":true,"body":"\n## Downloading\n\nThis package is added to existing Laravel projects as a dependency by requiring it with Composer.\n\n```bash\ncomposer require streams\/ui:1.0.x-dev\n```\n\nStreams UI comes pre-configured with the [Streams starter application](\/docs\/installation).\n\n### Cloning with Git\n\n```bash\ngit clone git@github.com:laravel-streams\/streams-ui.git\n```\n\n### Publishing Assets\n\nUse the following command to publish public assets for this package.\n\n```bash\nphp artisan vendor:publish --provider=Streams\\\\Ui\\\\UiServiceProvider --tag=public\n```\n\nThe above command will copy public assets from their package location to the `public\/vendor` directory.\n\n## Updating\n\nFrom within your project, use Composer to update this individual package:\n\n```bash\ncomposer update streams\/ui --with-dependencies\n```\n\nYou can also update your entire project using `composer update`.\n","href":"\/docs\/ui\/installation","package":"Streams UI"},{"id":"introduction","title":"Streams UI","link_title":"Introduction","intro":"Extensible components for managing streams and entry data.","enabled":true,"body":"\n## Introduction\n\nStreams UI is a utility-first system for creating dynamic user interfaces.\n","href":"\/docs\/ui\/introduction","package":"Streams UI"},{"id":"layouts","title":"Layouts","category":"components","enabled":true,"stage":"outlining","body":"\n1. [ ] **What** are layouts?\n2. [ ] How do you **use** layouts?\n3. [ ] How do you **build** layouts?\n4. [ ] How do you **secure** layouts?\n5. [ ] How do you **extend** layouts?\n\n- **Intro:** Introduce the idea in one sentence.\n- **Explanation:** An elevator pitch that signals the reader to continue or not (keep looking for relevant page).\n- **Sections\/Features:** Separate sections\/sub-sections (h2s\/h3s) consistently. This will build the ToC.\n- **Next Steps:** Next actions to take that are intentional versus simply additional reading.\n- **Code Examples:** Code examples and snippets.\n- **Insights:** Tips, post scriptum, creative links.\n- **Additional Reading:** Link to related ideas\/topics\/guides\/recipes.\n","href":"\/docs\/ui\/layouts","package":"Streams UI"},{"id":"modals","title":"Modals","category":"components","enabled":true,"stage":"outlining","body":"\n1. [ ] **What** are dropdowns?\n2. [ ] How do you **use** dropdowns?\n3. [ ] How do you **build** dropdowns?\n4. [ ] How do you **secure** dropdowns?\n5. [ ] How do you **extend** dropdowns?\n\n\n- **Intro:** Introduce the idea in one sentence.\n- **Explanation:** An elevator pitch that signals the reader to continue or not (keep looking for relevant page).\n- **Sections\/Features:** Separate sections\/sub-sections (h2s\/h3s) consistently. This will build the ToC.\n- **Next Steps:** Next actions to take that are intentional versus simply additional reading.\n- **Code Examples:** Code examples and snippets.\n- **Insights:** Tips, post scriptum, creative links.\n- **Additional Reading:** Link to related ideas\/topics\/guides\/recipes.\n","href":"\/docs\/ui\/modals","package":"Streams UI"},{"id":"navigation","title":"Navigation","category":"control_panel","sort":10,"enabled":true,"stage":"outlining","body":"\n\r\n- **Intro:** Introduce the idea in one sentence.\r\n- **Explanation:** An elevator pitch that signals the reader to continue or not (keep looking for relevant page).\r\n- **Sections\/Features:** Separate sections\/sub-sections (h2s\/h3s) consistently. This will build the ToC.\r\n- **Next Steps:** Next actions to take that are intentional versus simply additional reading.\r\n- **Code Examples:** Code examples and snippets.\r\n- **Insights:** Tips, post scriptum, creative links.\r\n- **Additional Reading:** Link to related ideas\/topics\/guides\/recipes.\r\n\r\n\r\n\r\n## Introduction\r\n\r\nStreams UI provides an interface for building data-driven, highly configurable control panels that can be integrated with any admin panel or UI kit.\r\n\r\nA sensible and generic control panel UI theme is available by default.\r\n\r\n### Routing\r\n\r\nYou can use the the `routes\/cp.php` file to define additional routes for the control panel. Routes defined there will be automatically prefixed and grouped.\r\n\r\nAdditionally, you can use the Route facade and **cp** method to define control panel routes.\r\n\r\n```bash\r\nRoute::cp('custom\/example\/{entry}', 'Your\\Controller@method');\r\n```\r\n\r\n- [Streams Core Routing](\/docs\/core\/routing)\r\n\r\n### Configuration\r\n\r\nBefore continueing please [enable the control panel](configuration#configuring-the-ui).\r\n\r\n## Components\r\n\r\nMultiple stream-enhanced components are used to assemble the control panel.\r\n\r\n### Navigation\r\n\r\nNavigation sections define the basic functional structure of your control panel.\r\n\r\n#### Defining Navigation\r\n\r\n```json\r\n\/\/ streams\/cp\/navigation\/users.json\r\n{\r\n    \"title\": \"Users\"\r\n}\r\n```\r\n\r\n#### Available Properties\r\n\r\nName | Type | Default | Description\r\n--|---|---|--\r\n`text` | [string](\/docs\/core\/fields\/string) | `null` |  The link text.\r\n`dropdown` | [object](#dropdowns) | `null` |  [Dropdown](dropdowns) items.\r\n\r\n\r\n### Shortcuts\r\n\r\nShortcuts define globally displayed, highly configurable, actionable items.\r\n\r\n\r\n#### Basic Example\r\n#### Dropdowns\r\n\r\n```json\r\n\/\/ streams\/cp\/shortcuts\/profile.json\r\n{\r\n    \"sort_order\": 99,\r\n    \"image\": \"\/user\/avatar\",\r\n    \"dropdown\": {\r\n        \"profile\": {\r\n            \"text\": \"Visit Website\",\r\n            \"attributes.href\": \"\/\",\r\n            \"target\": \"_blank\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n\r\n### Layouts\r\n\r\nLayouts define how to render the main content area of the control panel.\r\n\r\n\r\n### Themes\r\n\r\nThemes define globally accessible variables for the UI. Themes are defined by the `cp.themes` stream:\r\n\r\n\r\n## Extending\r\n\r\nBy [publishing](configuration#publish-streams) the Streams UI package streams you can customize anything you need.\r\n","href":"\/docs\/ui\/navigation","package":"Streams UI"},{"id":"shortcuts","title":"Shortcuts","category":"control_panel","sort":10,"enabled":true,"stage":"outlining","body":"\n\r\n- **Intro:** Introduce the idea in one sentence.\r\n- **Explanation:** An elevator pitch that signals the reader to continue or not (keep looking for relevant page).\r\n- **Sections\/Features:** Separate sections\/sub-sections (h2s\/h3s) consistently. This will build the ToC.\r\n- **Next Steps:** Next actions to take that are intentional versus simply additional reading.\r\n- **Code Examples:** Code examples and snippets.\r\n- **Insights:** Tips, post scriptum, creative links.\r\n- **Additional Reading:** Link to related ideas\/topics\/guides\/recipes.\r\n\r\n\r\n\r\n## Introduction\r\n\r\nStreams UI provides an interface for building data-driven, highly configurable control panels that can be integrated with any admin panel or UI kit.\r\n\r\nA sensible and generic control panel UI theme is available by default.\r\n\r\n### Routing\r\n\r\nYou can use the the `routes\/cp.php` file to define additional routes for the control panel. Routes defined there will be automatically prefixed and grouped.\r\n\r\nAdditionally, you can use the Route facade and **cp** method to define control panel routes.\r\n\r\n```bash\r\nRoute::cp('custom\/example\/{entry}', 'Your\\Controller@method');\r\n```\r\n\r\n- [Streams Core Routing](\/docs\/core\/routing)\r\n\r\n### Configuration\r\n\r\nBefore continueing please [enable the control panel](configuration#configuring-the-ui).\r\n\r\n## Components\r\n\r\nMultiple stream-enhanced components are used to assemble the control panel.\r\n\r\n### Navigation\r\n\r\nNavigation sections define the basic functional structure of your control panel.\r\n\r\n#### Defining Navigation\r\n\r\n```json\r\n\/\/ streams\/cp\/navigation\/users.json\r\n{\r\n    \"title\": \"Users\"\r\n}\r\n```\r\n\r\n#### Available Properties\r\n\r\nName | Type | Default | Description\r\n--|---|---|--\r\n`text` | [string](\/docs\/core\/fields\/string) | `null` |  The link text.\r\n`dropdown` | [object](#dropdowns) | `null` |  [Dropdown](dropdowns) items.\r\n\r\n\r\n### Shortcuts\r\n\r\nShortcuts define globally displayed, highly configurable, actionable items.\r\n\r\n\r\n#### Basic Example\r\n#### Dropdowns\r\n\r\n```json\r\n\/\/ streams\/cp\/shortcuts\/profile.json\r\n{\r\n    \"sort_order\": 99,\r\n    \"image\": \"\/user\/avatar\",\r\n    \"dropdown\": {\r\n        \"profile\": {\r\n            \"text\": \"Visit Website\",\r\n            \"attributes.href\": \"\/\",\r\n            \"target\": \"_blank\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n\r\n### Layouts\r\n\r\nLayouts define how to render the main content area of the control panel.\r\n\r\n\r\n### Themes\r\n\r\nThemes define globally accessible variables for the UI. Themes are defined by the `cp.themes` stream:\r\n\r\n\r\n## Extending\r\n\r\nBy [publishing](configuration#publish-streams) the Streams UI package streams you can customize anything you need.\r\n","href":"\/docs\/ui\/shortcuts","package":"Streams UI"},{"id":"tables","title":"Tables","category":"components","intro":null,"enabled":true,"stage":"outlining","body":"\n\r\n1. [ ] **What** are tables?\r\n2. [ ] How do you **use** tables?\r\n3. [ ] How do you **build** tables?\r\n4. [ ] How do you **secure** tables?\r\n5. [ ] How do you **extend** tables?\r\n\r\n- **Intro:** Introduce the idea in one sentence.\r\n- **Explanation:** An elevator pitch that signals the reader to continue or not (keep looking for relevant page).\r\n- **Sections\/Features:** Separate sections\/sub-sections (h2s\/h3s) consistently. This will build the ToC.\r\n- **Next Steps:** Next actions to take that are intentional versus simply additional reading.\r\n- **Code Examples:** Code examples and snippets.\r\n- **Insights:** Tips, post scriptum, creative links.\r\n- **Additional Reading:** Link to related ideas\/topics\/guides\/recipes.\r\n\r\n\r\n## Introduction\r\n\r\nTable builders help you quickly build up table components.\r\n\r\n## Defining Tables\r\n\r\n### Table Builders\r\n\r\nYou can instantiate a `TableBuilder` instance and interact with it directly.\r\n\r\n```php\r\nuse Steams\\Ui\\Table\\TableBuilder;\r\n\r\n$builder = new TableBuilder($parameters = []);\r\n```\r\n\r\n### Stream Tables\r\n\r\nDefining tables in your [stream configuration](..\/core\/streams#defining-streams) makes it easy to display, filter, and customize tables based your domain information and entities.\r\n\r\nDefine stream tables using a `handle => parameters` format, where `handle` will be used to reference the table later and  `parameters` is an array of [parameters](#parameters) and [components](#components) configuration.\r\n\r\n```json\r\n\/\/ streams\/example.json\r\n{\r\n    \"ui\": {\r\n        \"tables\": {\r\n            \"default\": {\r\n                \"actions\": {\r\n                    \"delete\": {}\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n\r\n### Parameters\r\n\r\nThe following parameters are available.\r\n\r\n```json\r\n{\r\n    \"stream\": null,\r\n    \"table\": null,\r\n    \"views\": [],\r\n    \"filters\": [],\r\n    \"columns\": [],\r\n    \"buttons\": [],\r\n    \"actions\": [],\r\n    \"options\": [],\r\n\r\n    \"template\": \"ui::tables.table\"\r\n}\r\n```\r\n\r\n| Name | Default | Description |\r\n| - | - | - |\r\n| stream | null | The contextual stream. |\r\n| table | default | The table configuration to use. |\r\n| views | [] | The table views. |\r\n| filters | [] | The table filters. |\r\n| columns | ['id' => []] | The table columns. |\r\n| buttons | [] | The table buttons. |\r\n| actions | [] | The table actions. |\r\n| template | ui::tables.table | The table template view. |\r\n\r\n\r\n##### stream `string|Stream`\r\n\r\nThe stream to use for data and table configuration.\r\n\r\n##### table `string`\r\n\r\nThe specific stream table configuration to use. The **default** configuration will be used otherwise.\r\n\r\n#### builder `string`\r\n\r\nUse the `builder` parameter to override the builder instance used to build the table component.\r\n\r\n##### repository `string`\r\n\r\nUse the `repository` parameter to override the repository instance used to fetch the entry. This parameter defaults to the stream configured repository if any.\r\n\r\n```json\r\n\/\/ streams\/example.json\r\n{\r\n    \"ui\": {\r\n        \"tables\": {\r\n            \"default\": {\r\n                \"repository\": \"App\\\\MyTableRepository\"\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n##### options `array`\r\n\r\nAn array of table options.\r\n\r\n### Configuration\r\n\r\nTable configurations can also be @imports for more congiguration\r\n\r\n```json\r\n{\r\n    \"ui\": {\r\n        \"table\": {}\r\n    }\r\n}\r\n```\r\n\r\nFull configuration:\r\n\r\n```json\r\n{\r\n    \"ui\": {\r\n        \"tables\": {\r\n            \"default\": {},\r\n            \"{handle}\": {}\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n```php\r\nuse Steams\\Ui\\Table\\TableBuilder;\r\n\r\n$builder = new TableBuilder([\r\n    'stream' => 'contacts',\r\n    'columns' => [\r\n        'name',\r\n        'email',\r\n    ],\r\n]);\r\n```\r\n\r\nConfiguration Examples\r\n\r\n```json\r\n{\r\n    \"table\": [\r\n        \/\/ Required Configuration\r\n        \"stream\",   \/\/ The stream the entry belongs to\r\n        \r\n        \/\/ Optional Configuration\r\n        \"repository\",   \/\/ The entry repository\r\n\r\n        \"builder\",  \/\/ The table builder to use\r\n        \"table\",    \/\/ The table component to use\r\n        \r\n        \"assets\",   \/\/ Assets to load\r\n        \r\n        \"views\",        \/\/ Table views configuration\r\n        \"filters\",      \/\/ Table filters configuration\r\n        \"columns\",      \/\/ Table columns configuration\r\n        \"actions\",      \/\/ Table actions configuration\r\n        \"buttons\",      \/\/ Table buttons configuration\r\n        \r\n        \"options\": [    \/\/ Component options array\r\n            \"sortable\" \/\/ Enable sortable functionality\r\n        ]\r\n    ],\r\n}\r\n```\r\n\r\n\r\n### Views\r\n### Filters\r\n### Columns\r\n### Actions\r\n### Buttons\r\n","href":"\/docs\/ui\/tables","package":"Streams UI"},{"id":"theming","title":"Theming","category":"developers","sort":99,"stage":"outlining","enabled":true,"body":"\n1. [ ] **What** are themes?\n1. [ ] How do you **use** themes?\n2. [ ] How do you **build** themes?\n3. [ ] How do you **extend** themes?\n\n- **Intro:** Introduce the idea in one sentence.\n- **Explanation:** An elevator pitch that signals the reader to continue or not (keep looking for relevant page).\n- **Sections\/Features:** Separate sections\/sub-sections (h2s\/h3s) consistently. This will build the ToC.\n- **Next Steps:** Next actions to take that are intentional versus simply additional reading.\n- **Code Examples:** Code examples and snippets.\n- **Insights:** Tips, post scriptum, creative links.\n- **Additional Reading:** Link to related ideas\/topics\/guides\/recipes.\n\n## Introduction\n\nStreams UI theming makes use of variables, configuration, and templating to effect the output of the UI.\n\n- Only CSS variables for easy customization\n- Uses existing services\/utilities to \"set up the theme\"\n- Themes are applied at runtime\n\n### Themes\n\n- Themes are [Streams addons](#addons\/themes) that configure the UI.\n- Themes can be applied easily.\n## Configuration\n\n- We need to stash component views and more in config for customization (reference applications)\n\n## Registered Assets\n\n```php\nAssets::register('ui::widget.css', 'ui::css\/widget.css');\nAssets::register('ui::widget.js', 'ui::js\/widget.js');\n\nAssets::load('ui::widget.css');\nAssets::load('ui::widget.js');\n```\n","href":"\/docs\/ui\/theming","package":"Streams UI"},{"id":"configuration","title":"Configuration","category":"getting_started","intro":"Configuring the SDK.","sort":2,"enabled":true,"body":"\n## Configuration Files\n\nPublished configuration files reside in `config\/streams\/`.\n\n``` files\n\u251c\u2500\u2500 config\/streams\/\n\u2502   \u2514\u2500\u2500 sdk.php\n```\n\n### Publishing Configuration\n\nUse the following command to publish configuration files.\n\n```bash\nphp artisan vendor:publish --provider=Streams\\\\Sdk\\\\SdkServiceProvider --tag=config\n```\n\nThe above command will copy configuration files from their package location to the directory mentioned above so that you can modify them directly and commit them to your version control system.\n\n## Configuration\n\nBelow are the contents of the published configuration file:\n\n```php\n\/\/ config\/streams\/sdk.php\n\nreturn [\n\n    \/*\n     * Determine if the SDK should be enabled.\n     *\n     * This is disabled by default because\n     * The SDK is public by default.\n     *\/\n    'enabled' => env('STREAMS_SDK_ENABLED', true),\n\n    \/*\n     * Specify the SDK prefix.\n     *\/\n    'prefix' => env('STREAMS_SDK_PREFIX', 'sdk'),\n\n    \/*\n     * Specify the SDK group middleware.\n     *\n     * This is designed to match out of the box\n     * \"app\/Providers\/RouteServiceProvider.php\"\n     * and \"app\/Http\/Kernel.php\" Laravel files.\n     *\n     * Changing this value will require\n     * adjusting the above files.\n     *\/\n    'middleware' => env('STREAMS_SDK_MIDDLEWARE', 'sdk'),\n\n];\n```\n\n### SDK Middleware\n\nSDK middleware an be configured in your application's HTTP kernel.\n\n```php\n\/\/ app\/Http\/Kernel.php\n\nprotected $middlewareGroups = [\n    'sdk' => [\n        'throttle:60,1',\n        'bindings',\n        Streams\\Sdk\\Http\\Middleware\\SdkCache::class,\n    ],\n];\n```\n\n### SDK Routes File\n\nThe `app\/Providers\/RouteServiceProvider.php` file typically uses the `sdk` middleware group when loading the `routes\/sdk.php` file. By default this is compatible and routes defined there will be properly prefixed and grouped.\n","href":"\/docs\/sdk\/configuration","package":"Streams SDK"},{"id":"entries","title":"Entries","category":"reference","sort":0,"enabled":true,"body":"\n## Introduction\n\nEntries represent the data within your configured [Streams](#streams). Use the Entries SDK to interact with streams data.\n\n## List Entries\n\nDisplay paginated entries from  a configured stream:\n\n```bash\nentries:list\n    {stream : The stream to list entries from.}\n    {--query= : Query constraints.}\n    {--show= : Comma-seperated fields to display.}\n    {--per-page=15 : Entries per page.}\n    {--page= : Page to list.}\n```\n\n#### Response\n\n```bash\nphp artisan entries:list docs --show=id,title --per-page=5\n\nTotal: 15\nPer Page: 5\nLast Page: 3\nCurrent Page: 1\n+---------------+---------------------+\n| id            | title               |\n+---------------+---------------------+\n| api           | API Readiness       |\n| configuration | Configuration       |\n| contributing  | Contributing        |\n| core          | Laravel Development |\n| debugging     | Debugging           |\n+---------------+---------------------+\n\n Next Page? (yes\/no) [yes]:\n > \n```\n\n### Filtering Results\n\nYou may filter entries by providing a query string of [criteria](..\/core\/querying#filtering) parameters.\n\n```bash\nphp artisan entries:list docs --show=id,title --query=where:category,core_concepts\n\nTotal: 5\nPer Page: 15\nLast Page: 1\nCurrent Page: 1\n+----------+----------------------+\n| id       | title                |\n+----------+----------------------+\n| api      | API Readiness        |\n| core     | Laravel Development  |\n| frontend | Frontend Development |\n| streams  | Data Modeling        |\n| ui       | User Interface       |\n+----------+----------------------+\n```\n\n<!-- ### Sorting Results\n\nYou may specify sorting and ordering within the JSON array of [criteria](..\/core\/querying#sorting-ordering) parameters.\n\n```bash\ncurl --location --request GET '\/api\/streams\/{stream}\/entries' \\\n    -H 'Content-Type: application\/json' \\\n    -d '{\"parameters\": [{\"order_by\": [\"name\", \"asc\"]}]}'\n``` -->\n\n\n## Create Entry\n\nCreate a new entry for a configured stream:\n\n```bash\nentries:create\n    {stream : The entry stream.} \n    {input? : Query string formatted attributes.}\n    {--update : Update if exists.}\n```\n\n#### Response\n\n```bash\nJSON OUTPUT\n```\n\n## Show Entry\n\nDisplay a single entry for a configured stream:\n\n```bash\nentries:show\n    {stream : The entry stream.}\n    {entry : The entry identifier.}\n    {--show= : Comma-seperated fields to show.}c\n```\n\n\n#### Response\n\n```bash\nphp artisan entries:show docs api\n\n+------------+---------------+\n| Field      | Value         |\n+------------+---------------+\n| id         | api           |\n| sort       | 20            |\n| stage      | review        |\n| title      | API Readiness |\n| category   | core_concepts |\n| enabled    | 1             |\n| publish_at |               |\n| body       |               |\n+------------+---------------+\n```\n","href":"\/docs\/sdk\/entries","package":"Streams SDK"},{"id":"installation","title":"Installation","category":"getting_started","intro":null,"enabled":true,"body":"\n## Downloading\n\nThis package is added to existing Laravel projects as a dependency by requiring it with Composer.\n\n```bash\ncomposer require streams\/sdk:1.0.x-dev\n```\n\nThe Streams SDK comes pre-configured with the [Streams starter application](\/docs\/installation) and some of the [examples](\/docs\/examples).\n\n## Updating\n\nFrom within your project, use Composer to update this individual package:\n\n```bash\ncomposer update streams\/sdk --with-dependencies\n```\n\nYou can also update your entire project using `composer update`.\n","href":"\/docs\/sdk\/installation","package":"Streams SDK"},{"id":"introduction","title":"Streams SDK","link_title":"Introduction","intro":"Laravel Streams sdkelopment tooling.","enabled":true,"body":"\n## Introduction\n\n### [Installation](installation)\n\n```bash\ncomposer require streams\/sdk\n```\n\n### [Configuration](configuration)\n\n```bash\nphp artisan vendor:publish --provider=Streams\\\\Sdk\\\\SdkServiceProvider --tag=config\n```\n","href":"\/docs\/sdk\/introduction","package":"Streams SDK"},{"id":"streams","title":"Streams","category":"reference","sort":0,"enabled":true,"body":"\n## Introduction\n\nStreams represent the data structures within your application. Use the Streams API to manage data structures.\n\nIf you want to access the data within a configured stream, use the [Entries API](entries).\n\n## List Streams\n\nDisplay a paginated list of configured stream:\n\n```bash\nstreams:list\n    {--query= : Query constraints.}\n    {--show= : Comma-seperated fields to display.}\n    {--per-page=15 : Entries per page.}\n    {--page= : Page to list.}\n```\n\n#### Response\n\n```bash\nphp artisan streams:list --show=id,name --query=where:id,like,%docs%\n\nTotal: 5\nPer Page: 15\nLast Page: 1\nCurrent Page: 1\n+-----------+--------------------+\n| id        | name               |\n+-----------+--------------------+\n| docs      | Laravel Streams    |\n| docs_api  | Streams API        |\n| docs_sdk  | SDK Documentation  |\n| docs_core | Core Documentation |\n| docs_ui   | Streams UI         |\n+-----------+--------------------+\n```\n\n## Create Stream\n\nCreate a new strean:\n\n```bash\nstreams:create\n    {input? : Query string formatted attributes.}\n    {--update : Update if exists.}\n```\n\n#### Response\n\n```bash\nJSON OUTPUT\n```\n\n## Show Stream\n\nDisplay a single entry for a configured stream:\n\n```bash\nstreams:show\n    {stream : The entry stream.}\n    {entry : The entry identifier.}\n    {--show= : Comma-seperated fields to show.}c\n```\n\n\n#### Response\n\n```bash\nphp artisan streams:show docs api\n\n+------------+---------------+\n| Field      | Value         |\n+------------+---------------+\n| id         | api           |\n| sort       | 20            |\n| stage      | review        |\n| title      | API Readiness |\n| category   | core_concepts |\n| enabled    | 1             |\n| publish_at |               |\n| body       |               |\n+------------+---------------+\n```\n\n## Stream Schema\n\nDisplay a JSON schema for the configured stream:\n\n```bash\nstreams:schema\n    {stream : The stream ID.}\n```\n\n\n#### Response\n\n```bash\nphp artisan streams:schema docs\n\n{\n    ... @todo replace when ready\n}\n```\n","href":"\/docs\/sdk\/streams","package":"Streams SDK"}]